// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for PulseAudio
class PulseAudioBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  PulseAudioBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  PulseAudioBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int gettimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<ffi.Void> __tz,
  ) {
    return _gettimeofday(
      __tv,
      __tz,
    );
  }

  late final _gettimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>>('gettimeofday');
  late final _gettimeofday = _gettimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<ffi.Void>)>();

  int settimeofday(
    ffi.Pointer<timeval> __tv,
    ffi.Pointer<timezone> __tz,
  ) {
    return _settimeofday(
      __tv,
      __tz,
    );
  }

  late final _settimeofdayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timezone>)>>('settimeofday');
  late final _settimeofday = _settimeofdayPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timezone>)>();

  int adjtime(
    ffi.Pointer<timeval> __delta,
    ffi.Pointer<timeval> __olddelta,
  ) {
    return _adjtime(
      __delta,
      __olddelta,
    );
  }

  late final _adjtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('adjtime');
  late final _adjtime = _adjtimePtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int getitimer(
    int __which,
    ffi.Pointer<itimerval> __value,
  ) {
    return _getitimer(
      __which,
      __value,
    );
  }

  late final _getitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              __itimer_which_t, ffi.Pointer<itimerval>)>>('getitimer');
  late final _getitimer =
      _getitimerPtr.asFunction<int Function(int, ffi.Pointer<itimerval>)>();

  int setitimer(
    int __which,
    ffi.Pointer<itimerval> __new,
    ffi.Pointer<itimerval> __old,
  ) {
    return _setitimer(
      __which,
      __new,
      __old,
    );
  }

  late final _setitimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(__itimer_which_t, ffi.Pointer<itimerval>,
              ffi.Pointer<itimerval>)>>('setitimer');
  late final _setitimer = _setitimerPtr.asFunction<
      int Function(int, ffi.Pointer<itimerval>, ffi.Pointer<itimerval>)>();

  int utimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _utimes(
      __file,
      __tvp,
    );
  }

  late final _utimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('utimes');
  late final _utimes = _utimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int lutimes(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _lutimes(
      __file,
      __tvp,
    );
  }

  late final _lutimesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>>('lutimes');
  late final _lutimes = _lutimesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<timeval>)>();

  int futimes(
    int __fd,
    ffi.Pointer<timeval> __tvp,
  ) {
    return _futimes(
      __fd,
      __tvp,
    );
  }

  late final _futimesPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<timeval>)>>(
      'futimes');
  late final _futimes =
      _futimesPtr.asFunction<int Function(int, ffi.Pointer<timeval>)>();

  int pthread_sigmask(
    int __how,
    ffi.Pointer<__sigset_t> __newmask,
    ffi.Pointer<__sigset_t> __oldmask,
  ) {
    return _pthread_sigmask(
      __how,
      __newmask,
      __oldmask,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<__sigset_t>,
              ffi.Pointer<__sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<__sigset_t>, ffi.Pointer<__sigset_t>)>();

  int pthread_kill(
    int __threadid,
    int __signo,
  ) {
    return _pthread_kill(
      __threadid,
      __signo,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Char> pa_get_library_version() {
    return _pa_get_library_version();
  }

  late final _pa_get_library_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'pa_get_library_version');
  late final _pa_get_library_version =
      _pa_get_library_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int pa_bytes_per_second(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_bytes_per_second(
      spec,
    );
  }

  late final _pa_bytes_per_secondPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_bytes_per_second');
  late final _pa_bytes_per_second = _pa_bytes_per_secondPtr
      .asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_frame_size(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_frame_size(
      spec,
    );
  }

  late final _pa_frame_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_frame_size');
  late final _pa_frame_size =
      _pa_frame_sizePtr.asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_size(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_size(
      spec,
    );
  }

  late final _pa_sample_sizePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_sample_size');
  late final _pa_sample_size = _pa_sample_sizePtr
      .asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_size_of_format(
    pa_sample_format f,
  ) {
    return _pa_sample_size_of_format(
      f.value,
    );
  }

  late final _pa_sample_size_of_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Int)>>(
          'pa_sample_size_of_format');
  late final _pa_sample_size_of_format =
      _pa_sample_size_of_formatPtr.asFunction<int Function(int)>();

  int pa_bytes_to_usec(
    int length,
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_bytes_to_usec(
      length,
      spec,
    );
  }

  late final _pa_bytes_to_usecPtr = _lookup<
      ffi.NativeFunction<
          pa_usec_t Function(
              ffi.Uint64, ffi.Pointer<pa_sample_spec>)>>('pa_bytes_to_usec');
  late final _pa_bytes_to_usec = _pa_bytes_to_usecPtr
      .asFunction<int Function(int, ffi.Pointer<pa_sample_spec>)>();

  int pa_usec_to_bytes(
    int t,
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_usec_to_bytes(
      t,
      spec,
    );
  }

  late final _pa_usec_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              pa_usec_t, ffi.Pointer<pa_sample_spec>)>>('pa_usec_to_bytes');
  late final _pa_usec_to_bytes = _pa_usec_to_bytesPtr
      .asFunction<int Function(int, ffi.Pointer<pa_sample_spec>)>();

  ffi.Pointer<pa_sample_spec> pa_sample_spec_init(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_spec_init(
      spec,
    );
  }

  late final _pa_sample_spec_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_sample_spec> Function(
              ffi.Pointer<pa_sample_spec>)>>('pa_sample_spec_init');
  late final _pa_sample_spec_init = _pa_sample_spec_initPtr.asFunction<
      ffi.Pointer<pa_sample_spec> Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_format_valid(
    int format,
  ) {
    return _pa_sample_format_valid(
      format,
    );
  }

  late final _pa_sample_format_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'pa_sample_format_valid');
  late final _pa_sample_format_valid =
      _pa_sample_format_validPtr.asFunction<int Function(int)>();

  int pa_sample_rate_valid(
    int rate,
  ) {
    return _pa_sample_rate_valid(
      rate,
    );
  }

  late final _pa_sample_rate_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Uint32)>>(
          'pa_sample_rate_valid');
  late final _pa_sample_rate_valid =
      _pa_sample_rate_validPtr.asFunction<int Function(int)>();

  int pa_channels_valid(
    int channels,
  ) {
    return _pa_channels_valid(
      channels,
    );
  }

  late final _pa_channels_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Uint8)>>(
          'pa_channels_valid');
  late final _pa_channels_valid =
      _pa_channels_validPtr.asFunction<int Function(int)>();

  int pa_sample_spec_valid(
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_spec_valid(
      spec,
    );
  }

  late final _pa_sample_spec_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_sample_spec>)>>(
      'pa_sample_spec_valid');
  late final _pa_sample_spec_valid = _pa_sample_spec_validPtr
      .asFunction<int Function(ffi.Pointer<pa_sample_spec>)>();

  int pa_sample_spec_equal(
    ffi.Pointer<pa_sample_spec> a,
    ffi.Pointer<pa_sample_spec> b,
  ) {
    return _pa_sample_spec_equal(
      a,
      b,
    );
  }

  late final _pa_sample_spec_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_sample_spec>)>>('pa_sample_spec_equal');
  late final _pa_sample_spec_equal = _pa_sample_spec_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_sample_spec>, ffi.Pointer<pa_sample_spec>)>();

  ffi.Pointer<ffi.Char> pa_sample_format_to_string(
    pa_sample_format f,
  ) {
    return _pa_sample_format_to_string(
      f.value,
    );
  }

  late final _pa_sample_format_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pa_sample_format_to_string');
  late final _pa_sample_format_to_string = _pa_sample_format_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  pa_sample_format pa_parse_sample_format(
    ffi.Pointer<ffi.Char> format,
  ) {
    return pa_sample_format.fromValue(_pa_parse_sample_format(
      format,
    ));
  }

  late final _pa_parse_sample_formatPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pa_parse_sample_format');
  late final _pa_parse_sample_format = _pa_parse_sample_formatPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_sample_spec_snprint(
    ffi.Pointer<ffi.Char> s,
    int l,
    ffi.Pointer<pa_sample_spec> spec,
  ) {
    return _pa_sample_spec_snprint(
      s,
      l,
      spec,
    );
  }

  late final _pa_sample_spec_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<pa_sample_spec>)>>('pa_sample_spec_snprint');
  late final _pa_sample_spec_snprint = _pa_sample_spec_snprintPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<pa_sample_spec>)>();

  ffi.Pointer<ffi.Char> pa_bytes_snprint(
    ffi.Pointer<ffi.Char> s,
    int l,
    int v,
  ) {
    return _pa_bytes_snprint(
      s,
      l,
      v,
    );
  }

  late final _pa_bytes_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.UnsignedInt)>>('pa_bytes_snprint');
  late final _pa_bytes_snprint = _pa_bytes_snprintPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  int pa_sample_format_is_le(
    pa_sample_format f,
  ) {
    return _pa_sample_format_is_le(
      f.value,
    );
  }

  late final _pa_sample_format_is_lePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'pa_sample_format_is_le');
  late final _pa_sample_format_is_le =
      _pa_sample_format_is_lePtr.asFunction<int Function(int)>();

  int pa_sample_format_is_be(
    pa_sample_format f,
  ) {
    return _pa_sample_format_is_be(
      f.value,
    );
  }

  late final _pa_sample_format_is_bePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'pa_sample_format_is_be');
  late final _pa_sample_format_is_be =
      _pa_sample_format_is_bePtr.asFunction<int Function(int)>();

  int pa_direction_valid(
    pa_direction direction,
  ) {
    return _pa_direction_valid(
      direction.value,
    );
  }

  late final _pa_direction_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>(
          'pa_direction_valid');
  late final _pa_direction_valid =
      _pa_direction_validPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> pa_direction_to_string(
    pa_direction direction,
  ) {
    return _pa_direction_to_string(
      direction.value,
    );
  }

  late final _pa_direction_to_stringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'pa_direction_to_string');
  late final _pa_direction_to_string = _pa_direction_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void pa_mainloop_api_once(
    ffi.Pointer<pa_mainloop_api> m,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<pa_mainloop_api> m,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_mainloop_api_once(
      m,
      callback,
      userdata,
    );
  }

  late final _pa_mainloop_api_oncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<pa_mainloop_api> m,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>>('pa_mainloop_api_once');
  late final _pa_mainloop_api_once = _pa_mainloop_api_oncePtr.asFunction<
      void Function(
          ffi.Pointer<pa_mainloop_api>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<pa_mainloop_api> m,
                      ffi.Pointer<ffi.Void> userdata)>>,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_proplist> pa_proplist_new() {
    return _pa_proplist_new();
  }

  late final _pa_proplist_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_proplist> Function()>>(
          'pa_proplist_new');
  late final _pa_proplist_new =
      _pa_proplist_newPtr.asFunction<ffi.Pointer<pa_proplist> Function()>();

  void pa_proplist_free(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_free(
      p,
    );
  }

  late final _pa_proplist_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_proplist>)>>(
          'pa_proplist_free');
  late final _pa_proplist_free = _pa_proplist_freePtr
      .asFunction<void Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_key_valid(
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pa_proplist_key_valid(
      key,
    );
  }

  late final _pa_proplist_key_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pa_proplist_key_valid');
  late final _pa_proplist_key_valid = _pa_proplist_key_validPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int pa_proplist_sets(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pa_proplist_sets(
      p,
      key,
      value,
    );
  }

  late final _pa_proplist_setsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pa_proplist_sets');
  late final _pa_proplist_sets = _pa_proplist_setsPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pa_proplist_setp(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> pair,
  ) {
    return _pa_proplist_setp(
      p,
      pair,
    );
  }

  late final _pa_proplist_setpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Char>)>>('pa_proplist_setp');
  late final _pa_proplist_setp = _pa_proplist_setpPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>)>();

  int pa_proplist_setf(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _pa_proplist_setf(
      p,
      key,
      format,
    );
  }

  late final _pa_proplist_setfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pa_proplist_setf');
  late final _pa_proplist_setf = _pa_proplist_setfPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int pa_proplist_set(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
  ) {
    return _pa_proplist_set(
      p,
      key,
      data,
      nbytes,
    );
  }

  late final _pa_proplist_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('pa_proplist_set');
  late final _pa_proplist_set = _pa_proplist_setPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Char> pa_proplist_gets(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pa_proplist_gets(
      p,
      key,
    );
  }

  late final _pa_proplist_getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Char>)>>('pa_proplist_gets');
  late final _pa_proplist_gets = _pa_proplist_getsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>)>();

  int pa_proplist_get(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Size> nbytes,
  ) {
    return _pa_proplist_get(
      p,
      key,
      data,
      nbytes,
    );
  }

  late final _pa_proplist_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pa_proplist_get');
  late final _pa_proplist_get = _pa_proplist_getPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  void pa_proplist_update(
    ffi.Pointer<pa_proplist> p,
    pa_update_mode mode,
    ffi.Pointer<pa_proplist> other,
  ) {
    return _pa_proplist_update(
      p,
      mode.value,
      other,
    );
  }

  late final _pa_proplist_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_proplist>, ffi.UnsignedInt,
              ffi.Pointer<pa_proplist>)>>('pa_proplist_update');
  late final _pa_proplist_update = _pa_proplist_updatePtr.asFunction<
      void Function(ffi.Pointer<pa_proplist>, int, ffi.Pointer<pa_proplist>)>();

  int pa_proplist_unset(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pa_proplist_unset(
      p,
      key,
    );
  }

  late final _pa_proplist_unsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Char>)>>('pa_proplist_unset');
  late final _pa_proplist_unset = _pa_proplist_unsetPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>)>();

  int pa_proplist_unset_many(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Pointer<ffi.Char>> keys,
  ) {
    return _pa_proplist_unset_many(
      p,
      keys,
    );
  }

  late final _pa_proplist_unset_manyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('pa_proplist_unset_many');
  late final _pa_proplist_unset_many = _pa_proplist_unset_manyPtr.asFunction<
      int Function(
          ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> pa_proplist_iterate(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> state,
  ) {
    return _pa_proplist_iterate(
      p,
      state,
    );
  }

  late final _pa_proplist_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pa_proplist_iterate');
  late final _pa_proplist_iterate = _pa_proplist_iteratePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Char> pa_proplist_to_string(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_to_string(
      p,
    );
  }

  late final _pa_proplist_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pa_proplist>)>>('pa_proplist_to_string');
  late final _pa_proplist_to_string = _pa_proplist_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<ffi.Char> pa_proplist_to_string_sep(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> sep,
  ) {
    return _pa_proplist_to_string_sep(
      p,
      sep,
    );
  }

  late final _pa_proplist_to_string_sepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Char>)>>('pa_proplist_to_string_sep');
  late final _pa_proplist_to_string_sep =
      _pa_proplist_to_string_sepPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pa_proplist> pa_proplist_from_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_proplist_from_string(
      str,
    );
  }

  late final _pa_proplist_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_proplist> Function(
              ffi.Pointer<ffi.Char>)>>('pa_proplist_from_string');
  late final _pa_proplist_from_string = _pa_proplist_from_stringPtr
      .asFunction<ffi.Pointer<pa_proplist> Function(ffi.Pointer<ffi.Char>)>();

  int pa_proplist_contains(
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _pa_proplist_contains(
      p,
      key,
    );
  }

  late final _pa_proplist_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<ffi.Char>)>>('pa_proplist_contains');
  late final _pa_proplist_contains = _pa_proplist_containsPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<ffi.Char>)>();

  void pa_proplist_clear(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_clear(
      p,
    );
  }

  late final _pa_proplist_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_proplist>)>>(
          'pa_proplist_clear');
  late final _pa_proplist_clear = _pa_proplist_clearPtr
      .asFunction<void Function(ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<pa_proplist> pa_proplist_copy(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_copy(
      p,
    );
  }

  late final _pa_proplist_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_proplist> Function(
              ffi.Pointer<pa_proplist>)>>('pa_proplist_copy');
  late final _pa_proplist_copy = _pa_proplist_copyPtr.asFunction<
      ffi.Pointer<pa_proplist> Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_size(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_size(
      p,
    );
  }

  late final _pa_proplist_sizePtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<pa_proplist>)>>(
      'pa_proplist_size');
  late final _pa_proplist_size =
      _pa_proplist_sizePtr.asFunction<int Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_isempty(
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_proplist_isempty(
      p,
    );
  }

  late final _pa_proplist_isemptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_proplist>)>>(
          'pa_proplist_isempty');
  late final _pa_proplist_isempty = _pa_proplist_isemptyPtr
      .asFunction<int Function(ffi.Pointer<pa_proplist>)>();

  int pa_proplist_equal(
    ffi.Pointer<pa_proplist> a,
    ffi.Pointer<pa_proplist> b,
  ) {
    return _pa_proplist_equal(
      a,
      b,
    );
  }

  late final _pa_proplist_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_proplist>,
              ffi.Pointer<pa_proplist>)>>('pa_proplist_equal');
  late final _pa_proplist_equal = _pa_proplist_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_proplist>, ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init(
    ffi.Pointer<pa_channel_map> m,
  ) {
    return _pa_channel_map_init(
      m,
    );
  }

  late final _pa_channel_map_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_init');
  late final _pa_channel_map_init = _pa_channel_map_initPtr.asFunction<
      ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_mono(
    ffi.Pointer<pa_channel_map> m,
  ) {
    return _pa_channel_map_init_mono(
      m,
    );
  }

  late final _pa_channel_map_init_monoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_init_mono');
  late final _pa_channel_map_init_mono =
      _pa_channel_map_init_monoPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_stereo(
    ffi.Pointer<pa_channel_map> m,
  ) {
    return _pa_channel_map_init_stereo(
      m,
    );
  }

  late final _pa_channel_map_init_stereoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_init_stereo');
  late final _pa_channel_map_init_stereo =
      _pa_channel_map_init_stereoPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_auto(
    ffi.Pointer<pa_channel_map> m,
    int channels,
    pa_channel_map_def def,
  ) {
    return _pa_channel_map_init_auto(
      m,
      channels,
      def.value,
    );
  }

  late final _pa_channel_map_init_autoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('pa_channel_map_init_auto');
  late final _pa_channel_map_init_auto =
      _pa_channel_map_init_autoPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>, int, int)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_init_extend(
    ffi.Pointer<pa_channel_map> m,
    int channels,
    pa_channel_map_def def,
  ) {
    return _pa_channel_map_init_extend(
      m,
      channels,
      def.value,
    );
  }

  late final _pa_channel_map_init_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('pa_channel_map_init_extend');
  late final _pa_channel_map_init_extend =
      _pa_channel_map_init_extendPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_channel_map>, int, int)>();

  ffi.Pointer<ffi.Char> pa_channel_position_to_string(
    pa_channel_position pos,
  ) {
    return _pa_channel_position_to_string(
      pos.value,
    );
  }

  late final _pa_channel_position_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pa_channel_position_to_string');
  late final _pa_channel_position_to_string = _pa_channel_position_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  pa_channel_position pa_channel_position_from_string(
    ffi.Pointer<ffi.Char> s,
  ) {
    return pa_channel_position.fromValue(_pa_channel_position_from_string(
      s,
    ));
  }

  late final _pa_channel_position_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pa_channel_position_from_string');
  late final _pa_channel_position_from_string =
      _pa_channel_position_from_stringPtr
          .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_channel_position_to_pretty_string(
    pa_channel_position pos,
  ) {
    return _pa_channel_position_to_pretty_string(
      pos.value,
    );
  }

  late final _pa_channel_position_to_pretty_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pa_channel_position_to_pretty_string');
  late final _pa_channel_position_to_pretty_string =
      _pa_channel_position_to_pretty_stringPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> pa_channel_map_snprint(
    ffi.Pointer<ffi.Char> s,
    int l,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_snprint(
      s,
      l,
      map,
    );
  }

  late final _pa_channel_map_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_snprint');
  late final _pa_channel_map_snprint = _pa_channel_map_snprintPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_channel_map> pa_channel_map_parse(
    ffi.Pointer<pa_channel_map> map,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _pa_channel_map_parse(
      map,
      s,
    );
  }

  late final _pa_channel_map_parsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<ffi.Char>)>>('pa_channel_map_parse');
  late final _pa_channel_map_parse = _pa_channel_map_parsePtr.asFunction<
      ffi.Pointer<pa_channel_map> Function(
          ffi.Pointer<pa_channel_map>, ffi.Pointer<ffi.Char>)>();

  int pa_channel_map_equal(
    ffi.Pointer<pa_channel_map> a,
    ffi.Pointer<pa_channel_map> b,
  ) {
    return _pa_channel_map_equal(
      a,
      b,
    );
  }

  late final _pa_channel_map_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_equal');
  late final _pa_channel_map_equal = _pa_channel_map_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_valid(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_valid(
      map,
    );
  }

  late final _pa_channel_map_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_valid');
  late final _pa_channel_map_valid = _pa_channel_map_validPtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_compatible(
    ffi.Pointer<pa_channel_map> map,
    ffi.Pointer<pa_sample_spec> ss,
  ) {
    return _pa_channel_map_compatible(
      map,
      ss,
    );
  }

  late final _pa_channel_map_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_sample_spec>)>>('pa_channel_map_compatible');
  late final _pa_channel_map_compatible =
      _pa_channel_map_compatiblePtr.asFunction<
          int Function(
              ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_sample_spec>)>();

  int pa_channel_map_superset(
    ffi.Pointer<pa_channel_map> a,
    ffi.Pointer<pa_channel_map> b,
  ) {
    return _pa_channel_map_superset(
      a,
      b,
    );
  }

  late final _pa_channel_map_supersetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_superset');
  late final _pa_channel_map_superset = _pa_channel_map_supersetPtr.asFunction<
      int Function(ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_can_balance(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_can_balance(
      map,
    );
  }

  late final _pa_channel_map_can_balancePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_can_balance');
  late final _pa_channel_map_can_balance = _pa_channel_map_can_balancePtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_can_fade(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_can_fade(
      map,
    );
  }

  late final _pa_channel_map_can_fadePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_can_fade');
  late final _pa_channel_map_can_fade = _pa_channel_map_can_fadePtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_can_lfe_balance(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_can_lfe_balance(
      map,
    );
  }

  late final _pa_channel_map_can_lfe_balancePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_channel_map>)>>(
      'pa_channel_map_can_lfe_balance');
  late final _pa_channel_map_can_lfe_balance =
      _pa_channel_map_can_lfe_balancePtr
          .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<ffi.Char> pa_channel_map_to_name(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_to_name(
      map,
    );
  }

  late final _pa_channel_map_to_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_to_name');
  late final _pa_channel_map_to_name = _pa_channel_map_to_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<ffi.Char> pa_channel_map_to_pretty_name(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_to_pretty_name(
      map,
    );
  }

  late final _pa_channel_map_to_pretty_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_to_pretty_name');
  late final _pa_channel_map_to_pretty_name =
      _pa_channel_map_to_pretty_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_channel_map>)>();

  int pa_channel_map_has_position(
    ffi.Pointer<pa_channel_map> map,
    pa_channel_position p,
  ) {
    return _pa_channel_map_has_position(
      map,
      p.value,
    );
  }

  late final _pa_channel_map_has_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_channel_map>,
              ffi.Int)>>('pa_channel_map_has_position');
  late final _pa_channel_map_has_position = _pa_channel_map_has_positionPtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>, int)>();

  int pa_channel_map_mask(
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_channel_map_mask(
      map,
    );
  }

  late final _pa_channel_map_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_channel_position_mask_t Function(
              ffi.Pointer<pa_channel_map>)>>('pa_channel_map_mask');
  late final _pa_channel_map_mask = _pa_channel_map_maskPtr
      .asFunction<int Function(ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<ffi.Char> pa_encoding_to_string(
    pa_encoding e,
  ) {
    return _pa_encoding_to_string(
      e.value,
    );
  }

  late final _pa_encoding_to_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pa_encoding_to_string');
  late final _pa_encoding_to_string = _pa_encoding_to_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  pa_encoding pa_encoding_from_string(
    ffi.Pointer<ffi.Char> encoding,
  ) {
    return pa_encoding.fromValue(_pa_encoding_from_string(
      encoding,
    ));
  }

  late final _pa_encoding_from_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'pa_encoding_from_string');
  late final _pa_encoding_from_string = _pa_encoding_from_stringPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pa_format_info> pa_format_info_new() {
    return _pa_format_info_new();
  }

  late final _pa_format_info_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_format_info> Function()>>(
          'pa_format_info_new');
  late final _pa_format_info_new = _pa_format_info_newPtr
      .asFunction<ffi.Pointer<pa_format_info> Function()>();

  ffi.Pointer<pa_format_info> pa_format_info_copy(
    ffi.Pointer<pa_format_info> src,
  ) {
    return _pa_format_info_copy(
      src,
    );
  }

  late final _pa_format_info_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<pa_format_info>)>>('pa_format_info_copy');
  late final _pa_format_info_copy = _pa_format_info_copyPtr.asFunction<
      ffi.Pointer<pa_format_info> Function(ffi.Pointer<pa_format_info>)>();

  void pa_format_info_free(
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_free(
      f,
    );
  }

  late final _pa_format_info_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_format_info>)>>(
      'pa_format_info_free');
  late final _pa_format_info_free = _pa_format_info_freePtr
      .asFunction<void Function(ffi.Pointer<pa_format_info>)>();

  int pa_format_info_valid(
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_valid(
      f,
    );
  }

  late final _pa_format_info_validPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_format_info>)>>(
      'pa_format_info_valid');
  late final _pa_format_info_valid = _pa_format_info_validPtr
      .asFunction<int Function(ffi.Pointer<pa_format_info>)>();

  int pa_format_info_is_pcm(
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_is_pcm(
      f,
    );
  }

  late final _pa_format_info_is_pcmPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_format_info>)>>(
      'pa_format_info_is_pcm');
  late final _pa_format_info_is_pcm = _pa_format_info_is_pcmPtr
      .asFunction<int Function(ffi.Pointer<pa_format_info>)>();

  int pa_format_info_is_compatible(
    ffi.Pointer<pa_format_info> first,
    ffi.Pointer<pa_format_info> second,
  ) {
    return _pa_format_info_is_compatible(
      first,
      second,
    );
  }

  late final _pa_format_info_is_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_format_info>)>>('pa_format_info_is_compatible');
  late final _pa_format_info_is_compatible =
      _pa_format_info_is_compatiblePtr.asFunction<
          int Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<pa_format_info>)>();

  ffi.Pointer<ffi.Char> pa_format_info_snprint(
    ffi.Pointer<ffi.Char> s,
    int l,
    ffi.Pointer<pa_format_info> f,
  ) {
    return _pa_format_info_snprint(
      s,
      l,
      f,
    );
  }

  late final _pa_format_info_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<pa_format_info>)>>('pa_format_info_snprint');
  late final _pa_format_info_snprint = _pa_format_info_snprintPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<pa_format_info>)>();

  ffi.Pointer<pa_format_info> pa_format_info_from_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_format_info_from_string(
      str,
    );
  }

  late final _pa_format_info_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<ffi.Char>)>>('pa_format_info_from_string');
  late final _pa_format_info_from_string =
      _pa_format_info_from_stringPtr.asFunction<
          ffi.Pointer<pa_format_info> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pa_format_info> pa_format_info_from_sample_spec(
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_from_sample_spec(
      ss,
      map,
    );
  }

  late final _pa_format_info_from_sample_specPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_from_sample_spec');
  late final _pa_format_info_from_sample_spec =
      _pa_format_info_from_sample_specPtr.asFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<pa_sample_spec>, ffi.Pointer<pa_channel_map>)>();

  int pa_format_info_to_sample_spec(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_to_sample_spec(
      f,
      ss,
      map,
    );
  }

  late final _pa_format_info_to_sample_specPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_to_sample_spec');
  late final _pa_format_info_to_sample_spec =
      _pa_format_info_to_sample_specPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>();

  pa_prop_type_t pa_format_info_get_prop_type(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
  ) {
    return pa_prop_type_t.fromValue(_pa_format_info_get_prop_type(
      f,
      key,
    ));
  }

  late final _pa_format_info_get_prop_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Char>)>>('pa_format_info_get_prop_type');
  late final _pa_format_info_get_prop_type =
      _pa_format_info_get_prop_typePtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>)>();

  int pa_format_info_get_prop_int(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int> v,
  ) {
    return _pa_format_info_get_prop_int(
      f,
      key,
      v,
    );
  }

  late final _pa_format_info_get_prop_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('pa_format_info_get_prop_int');
  late final _pa_format_info_get_prop_int =
      _pa_format_info_get_prop_intPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>();

  int pa_format_info_get_prop_int_range(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int> min,
    ffi.Pointer<ffi.Int> max,
  ) {
    return _pa_format_info_get_prop_int_range(
      f,
      key,
      min,
      max,
    );
  }

  late final _pa_format_info_get_prop_int_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('pa_format_info_get_prop_int_range');
  late final _pa_format_info_get_prop_int_range =
      _pa_format_info_get_prop_int_rangePtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int pa_format_info_get_prop_int_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Int>> values,
    ffi.Pointer<ffi.Int> n_values,
  ) {
    return _pa_format_info_get_prop_int_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_get_prop_int_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>,
              ffi.Pointer<ffi.Int>)>>('pa_format_info_get_prop_int_array');
  late final _pa_format_info_get_prop_int_array =
      _pa_format_info_get_prop_int_arrayPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>, ffi.Pointer<ffi.Int>)>();

  int pa_format_info_get_prop_string(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> v,
  ) {
    return _pa_format_info_get_prop_string(
      f,
      key,
      v,
    );
  }

  late final _pa_format_info_get_prop_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pa_format_info>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'pa_format_info_get_prop_string');
  late final _pa_format_info_get_prop_string =
      _pa_format_info_get_prop_stringPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int pa_format_info_get_prop_string_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> values,
    ffi.Pointer<ffi.Int> n_values,
  ) {
    return _pa_format_info_get_prop_string_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_get_prop_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Int>)>>('pa_format_info_get_prop_string_array');
  late final _pa_format_info_get_prop_string_array =
      _pa_format_info_get_prop_string_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Int>)>();

  void pa_format_info_free_string_array(
    ffi.Pointer<ffi.Pointer<ffi.Char>> values,
    int n_values,
  ) {
    return _pa_format_info_free_string_array(
      values,
      n_values,
    );
  }

  late final _pa_format_info_free_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('pa_format_info_free_string_array');
  late final _pa_format_info_free_string_array =
      _pa_format_info_free_string_arrayPtr
          .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int pa_format_info_get_sample_format(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Int> sf,
  ) {
    return _pa_format_info_get_sample_format(
      f,
      sf,
    );
  }

  late final _pa_format_info_get_sample_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Int>)>>('pa_format_info_get_sample_format');
  late final _pa_format_info_get_sample_format =
      _pa_format_info_get_sample_formatPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Int>)>();

  int pa_format_info_get_rate(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Uint32> rate,
  ) {
    return _pa_format_info_get_rate(
      f,
      rate,
    );
  }

  late final _pa_format_info_get_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Uint32>)>>('pa_format_info_get_rate');
  late final _pa_format_info_get_rate = _pa_format_info_get_ratePtr.asFunction<
      int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Uint32>)>();

  int pa_format_info_get_channels(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Uint8> channels,
  ) {
    return _pa_format_info_get_channels(
      f,
      channels,
    );
  }

  late final _pa_format_info_get_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Uint8>)>>('pa_format_info_get_channels');
  late final _pa_format_info_get_channels =
      _pa_format_info_get_channelsPtr.asFunction<
          int Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Uint8>)>();

  int pa_format_info_get_channel_map(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_get_channel_map(
      f,
      map,
    );
  }

  late final _pa_format_info_get_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_get_channel_map');
  late final _pa_format_info_get_channel_map =
      _pa_format_info_get_channel_mapPtr.asFunction<
          int Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<pa_channel_map>)>();

  void pa_format_info_set_prop_int(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    int value,
  ) {
    return _pa_format_info_set_prop_int(
      f,
      key,
      value,
    );
  }

  late final _pa_format_info_set_prop_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('pa_format_info_set_prop_int');
  late final _pa_format_info_set_prop_int =
      _pa_format_info_set_prop_intPtr.asFunction<
          void Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>, int)>();

  void pa_format_info_set_prop_int_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Int> values,
    int n_values,
  ) {
    return _pa_format_info_set_prop_int_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_set_prop_int_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('pa_format_info_set_prop_int_array');
  late final _pa_format_info_set_prop_int_array =
      _pa_format_info_set_prop_int_arrayPtr.asFunction<
          void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>, int)>();

  void pa_format_info_set_prop_int_range(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    int min,
    int max,
  ) {
    return _pa_format_info_set_prop_int_range(
      f,
      key,
      min,
      max,
    );
  }

  late final _pa_format_info_set_prop_int_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int)>>('pa_format_info_set_prop_int_range');
  late final _pa_format_info_set_prop_int_range =
      _pa_format_info_set_prop_int_rangePtr.asFunction<
          void Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>, int, int)>();

  void pa_format_info_set_prop_string(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _pa_format_info_set_prop_string(
      f,
      key,
      value,
    );
  }

  late final _pa_format_info_set_prop_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('pa_format_info_set_prop_string');
  late final _pa_format_info_set_prop_string =
      _pa_format_info_set_prop_stringPtr.asFunction<
          void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  void pa_format_info_set_prop_string_array(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Pointer<ffi.Char>> values,
    int n_values,
  ) {
    return _pa_format_info_set_prop_string_array(
      f,
      key,
      values,
      n_values,
    );
  }

  late final _pa_format_info_set_prop_string_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_format_info>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('pa_format_info_set_prop_string_array');
  late final _pa_format_info_set_prop_string_array =
      _pa_format_info_set_prop_string_arrayPtr.asFunction<
          void Function(ffi.Pointer<pa_format_info>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  void pa_format_info_set_sample_format(
    ffi.Pointer<pa_format_info> f,
    pa_sample_format sf,
  ) {
    return _pa_format_info_set_sample_format(
      f,
      sf.value,
    );
  }

  late final _pa_format_info_set_sample_formatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Int)>>('pa_format_info_set_sample_format');
  late final _pa_format_info_set_sample_format =
      _pa_format_info_set_sample_formatPtr
          .asFunction<void Function(ffi.Pointer<pa_format_info>, int)>();

  void pa_format_info_set_rate(
    ffi.Pointer<pa_format_info> f,
    int rate,
  ) {
    return _pa_format_info_set_rate(
      f,
      rate,
    );
  }

  late final _pa_format_info_set_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Int)>>('pa_format_info_set_rate');
  late final _pa_format_info_set_rate = _pa_format_info_set_ratePtr
      .asFunction<void Function(ffi.Pointer<pa_format_info>, int)>();

  void pa_format_info_set_channels(
    ffi.Pointer<pa_format_info> f,
    int channels,
  ) {
    return _pa_format_info_set_channels(
      f,
      channels,
    );
  }

  late final _pa_format_info_set_channelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Int)>>('pa_format_info_set_channels');
  late final _pa_format_info_set_channels = _pa_format_info_set_channelsPtr
      .asFunction<void Function(ffi.Pointer<pa_format_info>, int)>();

  void pa_format_info_set_channel_map(
    ffi.Pointer<pa_format_info> f,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_format_info_set_channel_map(
      f,
      map,
    );
  }

  late final _pa_format_info_set_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_format_info>,
              ffi.Pointer<pa_channel_map>)>>('pa_format_info_set_channel_map');
  late final _pa_format_info_set_channel_map =
      _pa_format_info_set_channel_mapPtr.asFunction<
          void Function(
              ffi.Pointer<pa_format_info>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_operation> pa_operation_ref(
    ffi.Pointer<pa_operation> o,
  ) {
    return _pa_operation_ref(
      o,
    );
  }

  late final _pa_operation_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_operation>)>>('pa_operation_ref');
  late final _pa_operation_ref = _pa_operation_refPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_operation>)>();

  void pa_operation_unref(
    ffi.Pointer<pa_operation> o,
  ) {
    return _pa_operation_unref(
      o,
    );
  }

  late final _pa_operation_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_operation>)>>(
          'pa_operation_unref');
  late final _pa_operation_unref = _pa_operation_unrefPtr
      .asFunction<void Function(ffi.Pointer<pa_operation>)>();

  void pa_operation_cancel(
    ffi.Pointer<pa_operation> o,
  ) {
    return _pa_operation_cancel(
      o,
    );
  }

  late final _pa_operation_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_operation>)>>(
          'pa_operation_cancel');
  late final _pa_operation_cancel = _pa_operation_cancelPtr
      .asFunction<void Function(ffi.Pointer<pa_operation>)>();

  pa_operation_state pa_operation_get_state(
    ffi.Pointer<pa_operation> o,
  ) {
    return pa_operation_state.fromValue(_pa_operation_get_state(
      o,
    ));
  }

  late final _pa_operation_get_statePtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<pa_operation>)>>(
      'pa_operation_get_state');
  late final _pa_operation_get_state = _pa_operation_get_statePtr
      .asFunction<int Function(ffi.Pointer<pa_operation>)>();

  void pa_operation_set_state_callback(
    ffi.Pointer<pa_operation> o,
    pa_operation_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_operation_set_state_callback(
      o,
      cb,
      userdata,
    );
  }

  late final _pa_operation_set_state_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_operation>, pa_operation_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_operation_set_state_callback');
  late final _pa_operation_set_state_callback =
      _pa_operation_set_state_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_operation>, pa_operation_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_context> pa_context_new(
    ffi.Pointer<pa_mainloop_api> mainloop,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _pa_context_new(
      mainloop,
      name,
    );
  }

  late final _pa_context_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<ffi.Char>)>>('pa_context_new');
  late final _pa_context_new = _pa_context_newPtr.asFunction<
      ffi.Pointer<pa_context> Function(
          ffi.Pointer<pa_mainloop_api>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pa_context> pa_context_new_with_proplist(
    ffi.Pointer<pa_mainloop_api> mainloop,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_proplist> proplist,
  ) {
    return _pa_context_new_with_proplist(
      mainloop,
      name,
      proplist,
    );
  }

  late final _pa_context_new_with_proplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(
              ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_proplist>)>>('pa_context_new_with_proplist');
  late final _pa_context_new_with_proplist =
      _pa_context_new_with_proplistPtr.asFunction<
          ffi.Pointer<pa_context> Function(ffi.Pointer<pa_mainloop_api>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<pa_proplist>)>();

  void pa_context_unref(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_unref(
      c,
    );
  }

  late final _pa_context_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_context>)>>(
          'pa_context_unref');
  late final _pa_context_unref =
      _pa_context_unrefPtr.asFunction<void Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_context> pa_context_ref(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_ref(
      c,
    );
  }

  late final _pa_context_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(
              ffi.Pointer<pa_context>)>>('pa_context_ref');
  late final _pa_context_ref = _pa_context_refPtr
      .asFunction<ffi.Pointer<pa_context> Function(ffi.Pointer<pa_context>)>();

  void pa_context_set_state_callback(
    ffi.Pointer<pa_context> c,
    pa_context_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_state_callback(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_state_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, pa_context_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_state_callback');
  late final _pa_context_set_state_callback =
      _pa_context_set_state_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_context>, pa_context_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_context_set_event_callback(
    ffi.Pointer<pa_context> p,
    pa_context_event_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_event_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_event_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, pa_context_event_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_event_callback');
  late final _pa_context_set_event_callback =
      _pa_context_set_event_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_context>, pa_context_event_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_context_errno(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_errno(
      c,
    );
  }

  late final _pa_context_errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_context>)>>(
          'pa_context_errno');
  late final _pa_context_errno =
      _pa_context_errnoPtr.asFunction<int Function(ffi.Pointer<pa_context>)>();

  int pa_context_is_pending(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_is_pending(
      c,
    );
  }

  late final _pa_context_is_pendingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_context>)>>(
          'pa_context_is_pending');
  late final _pa_context_is_pending = _pa_context_is_pendingPtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  pa_context_state pa_context_get_state(
    ffi.Pointer<pa_context> c,
  ) {
    return pa_context_state.fromValue(_pa_context_get_state(
      c,
    ));
  }

  late final _pa_context_get_statePtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<pa_context>)>>(
      'pa_context_get_state');
  late final _pa_context_get_state = _pa_context_get_statePtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  int pa_context_connect(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> server,
    pa_context_flags flags,
    ffi.Pointer<pa_spawn_api> api,
  ) {
    return _pa_context_connect(
      c,
      server,
      flags.value,
      api,
    );
  }

  late final _pa_context_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<pa_spawn_api>)>>('pa_context_connect');
  late final _pa_context_connect = _pa_context_connectPtr.asFunction<
      int Function(ffi.Pointer<pa_context>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<pa_spawn_api>)>();

  void pa_context_disconnect(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_disconnect(
      c,
    );
  }

  late final _pa_context_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_context>)>>(
          'pa_context_disconnect');
  late final _pa_context_disconnect = _pa_context_disconnectPtr
      .asFunction<void Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_operation> pa_context_drain(
    ffi.Pointer<pa_context> c,
    pa_context_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_drain(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_drainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_context_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_drain');
  late final _pa_context_drain = _pa_context_drainPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
          pa_context_notify_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_exit_daemon(
    ffi.Pointer<pa_context> c,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_exit_daemon(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_exit_daemonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_exit_daemon');
  late final _pa_context_exit_daemon = _pa_context_exit_daemonPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
          pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_default_sink(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_default_sink(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_default_sinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_default_sink');
  late final _pa_context_set_default_sink =
      _pa_context_set_default_sinkPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_default_source(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_default_source(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_default_sourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_default_source');
  late final _pa_context_set_default_source =
      _pa_context_set_default_sourcePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_context_is_local(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_is_local(
      c,
    );
  }

  late final _pa_context_is_localPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_context>)>>(
          'pa_context_is_local');
  late final _pa_context_is_local = _pa_context_is_localPtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_operation> pa_context_set_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_name');
  late final _pa_context_set_name = _pa_context_set_namePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Char>,
          pa_context_success_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> pa_context_get_server(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_get_server(
      c,
    );
  }

  late final _pa_context_get_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pa_context>)>>('pa_context_get_server');
  late final _pa_context_get_server = _pa_context_get_serverPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_context>)>();

  int pa_context_get_protocol_version(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_get_protocol_version(
      c,
    );
  }

  late final _pa_context_get_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_get_protocol_version');
  late final _pa_context_get_protocol_version =
      _pa_context_get_protocol_versionPtr
          .asFunction<int Function(ffi.Pointer<pa_context>)>();

  int pa_context_get_server_protocol_version(
    ffi.Pointer<pa_context> c,
  ) {
    return _pa_context_get_server_protocol_version(
      c,
    );
  }

  late final _pa_context_get_server_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_get_server_protocol_version');
  late final _pa_context_get_server_protocol_version =
      _pa_context_get_server_protocol_versionPtr
          .asFunction<int Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_operation> pa_context_proplist_update(
    ffi.Pointer<pa_context> c,
    pa_update_mode mode,
    ffi.Pointer<pa_proplist> p,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_proplist_update(
      c,
      mode.value,
      p,
      cb,
      userdata,
    );
  }

  late final _pa_context_proplist_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.UnsignedInt,
              ffi.Pointer<pa_proplist>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_proplist_update');
  late final _pa_context_proplist_update =
      _pa_context_proplist_updatePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_proplist>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_proplist_remove(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Pointer<ffi.Char>> keys,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_proplist_remove(
      c,
      keys,
      cb,
      userdata,
    );
  }

  late final _pa_context_proplist_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_proplist_remove');
  late final _pa_context_proplist_remove =
      _pa_context_proplist_removePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_context_get_index(
    ffi.Pointer<pa_context> s,
  ) {
    return _pa_context_get_index(
      s,
    );
  }

  late final _pa_context_get_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_context>)>>(
          'pa_context_get_index');
  late final _pa_context_get_index = _pa_context_get_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_context>)>();

  ffi.Pointer<pa_time_event> pa_context_rttime_new(
    ffi.Pointer<pa_context> c,
    int usec,
    pa_time_event_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_rttime_new(
      c,
      usec,
      cb,
      userdata,
    );
  }

  late final _pa_context_rttime_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_time_event> Function(
              ffi.Pointer<pa_context>,
              pa_usec_t,
              pa_time_event_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_rttime_new');
  late final _pa_context_rttime_new = _pa_context_rttime_newPtr.asFunction<
      ffi.Pointer<pa_time_event> Function(ffi.Pointer<pa_context>, int,
          pa_time_event_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_context_rttime_restart(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_time_event> e,
    int usec,
  ) {
    return _pa_context_rttime_restart(
      c,
      e,
      usec,
    );
  }

  late final _pa_context_rttime_restartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_time_event>,
              pa_usec_t)>>('pa_context_rttime_restart');
  late final _pa_context_rttime_restart =
      _pa_context_rttime_restartPtr.asFunction<
          void Function(
              ffi.Pointer<pa_context>, ffi.Pointer<pa_time_event>, int)>();

  int pa_context_get_tile_size(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sample_spec> ss,
  ) {
    return _pa_context_get_tile_size(
      c,
      ss,
    );
  }

  late final _pa_context_get_tile_sizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<pa_context>,
              ffi.Pointer<pa_sample_spec>)>>('pa_context_get_tile_size');
  late final _pa_context_get_tile_size =
      _pa_context_get_tile_sizePtr.asFunction<
          int Function(ffi.Pointer<pa_context>, ffi.Pointer<pa_sample_spec>)>();

  int pa_context_load_cookie_from_file(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> cookie_file_path,
  ) {
    return _pa_context_load_cookie_from_file(
      c,
      cookie_file_path,
    );
  }

  late final _pa_context_load_cookie_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>)>>('pa_context_load_cookie_from_file');
  late final _pa_context_load_cookie_from_file =
      _pa_context_load_cookie_from_filePtr.asFunction<
          int Function(ffi.Pointer<pa_context>, ffi.Pointer<ffi.Char>)>();

  int pa_cvolume_equal(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_cvolume_equal(
      a,
      b,
    );
  }

  late final _pa_cvolume_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_equal');
  late final _pa_cvolume_equal = _pa_cvolume_equalPtr.asFunction<
      int Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_init(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_init(
      a,
    );
  }

  late final _pa_cvolume_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_init');
  late final _pa_cvolume_init = _pa_cvolume_initPtr
      .asFunction<ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set(
    ffi.Pointer<pa_cvolume> a,
    int channels,
    int v,
  ) {
    return _pa_cvolume_set(
      a,
      channels,
      v,
    );
  }

  late final _pa_cvolume_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
              ffi.UnsignedInt, pa_volume_t)>>('pa_cvolume_set');
  late final _pa_cvolume_set = _pa_cvolume_setPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int, int)>();

  ffi.Pointer<ffi.Char> pa_cvolume_snprint(
    ffi.Pointer<ffi.Char> s,
    int l,
    ffi.Pointer<pa_cvolume> c,
  ) {
    return _pa_cvolume_snprint(
      s,
      l,
      c,
    );
  }

  late final _pa_cvolume_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_snprint');
  late final _pa_cvolume_snprint = _pa_cvolume_snprintPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<ffi.Char> pa_sw_cvolume_snprint_dB(
    ffi.Pointer<ffi.Char> s,
    int l,
    ffi.Pointer<pa_cvolume> c,
  ) {
    return _pa_sw_cvolume_snprint_dB(
      s,
      l,
      c,
    );
  }

  late final _pa_sw_cvolume_snprint_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<pa_cvolume>)>>('pa_sw_cvolume_snprint_dB');
  late final _pa_sw_cvolume_snprint_dB =
      _pa_sw_cvolume_snprint_dBPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<ffi.Char> pa_cvolume_snprint_verbose(
    ffi.Pointer<ffi.Char> s,
    int l,
    ffi.Pointer<pa_cvolume> c,
    ffi.Pointer<pa_channel_map> map,
    int print_dB,
  ) {
    return _pa_cvolume_snprint_verbose(
      s,
      l,
      c,
      map,
      print_dB,
    );
  }

  late final _pa_cvolume_snprint_verbosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Int)>>('pa_cvolume_snprint_verbose');
  late final _pa_cvolume_snprint_verbose =
      _pa_cvolume_snprint_verbosePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int,
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  ffi.Pointer<ffi.Char> pa_volume_snprint(
    ffi.Pointer<ffi.Char> s,
    int l,
    int v,
  ) {
    return _pa_volume_snprint(
      s,
      l,
      v,
    );
  }

  late final _pa_volume_snprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              pa_volume_t)>>('pa_volume_snprint');
  late final _pa_volume_snprint = _pa_volume_snprintPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> pa_sw_volume_snprint_dB(
    ffi.Pointer<ffi.Char> s,
    int l,
    int v,
  ) {
    return _pa_sw_volume_snprint_dB(
      s,
      l,
      v,
    );
  }

  late final _pa_sw_volume_snprint_dBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              pa_volume_t)>>('pa_sw_volume_snprint_dB');
  late final _pa_sw_volume_snprint_dB = _pa_sw_volume_snprint_dBPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> pa_volume_snprint_verbose(
    ffi.Pointer<ffi.Char> s,
    int l,
    int v,
    int print_dB,
  ) {
    return _pa_volume_snprint_verbose(
      s,
      l,
      v,
      print_dB,
    );
  }

  late final _pa_volume_snprint_verbosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              pa_volume_t, ffi.Int)>>('pa_volume_snprint_verbose');
  late final _pa_volume_snprint_verbose =
      _pa_volume_snprint_verbosePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, int, int, int)>();

  int pa_cvolume_avg(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_avg(
      a,
    );
  }

  late final _pa_cvolume_avgPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(ffi.Pointer<pa_cvolume>)>>(
      'pa_cvolume_avg');
  late final _pa_cvolume_avg =
      _pa_cvolume_avgPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_avg_mask(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_avg_mask(
      a,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_avg_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_avg_mask');
  late final _pa_cvolume_avg_mask = _pa_cvolume_avg_maskPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  int pa_cvolume_max(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_max(
      a,
    );
  }

  late final _pa_cvolume_maxPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(ffi.Pointer<pa_cvolume>)>>(
      'pa_cvolume_max');
  late final _pa_cvolume_max =
      _pa_cvolume_maxPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_max_mask(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_max_mask(
      a,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_max_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_max_mask');
  late final _pa_cvolume_max_mask = _pa_cvolume_max_maskPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  int pa_cvolume_min(
    ffi.Pointer<pa_cvolume> a,
  ) {
    return _pa_cvolume_min(
      a,
    );
  }

  late final _pa_cvolume_minPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(ffi.Pointer<pa_cvolume>)>>(
      'pa_cvolume_min');
  late final _pa_cvolume_min =
      _pa_cvolume_minPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_min_mask(
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_min_mask(
      a,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_min_maskPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_min_mask');
  late final _pa_cvolume_min_mask = _pa_cvolume_min_maskPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  int pa_cvolume_valid(
    ffi.Pointer<pa_cvolume> v,
  ) {
    return _pa_cvolume_valid(
      v,
    );
  }

  late final _pa_cvolume_validPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_cvolume>)>>(
          'pa_cvolume_valid');
  late final _pa_cvolume_valid =
      _pa_cvolume_validPtr.asFunction<int Function(ffi.Pointer<pa_cvolume>)>();

  int pa_cvolume_channels_equal_to(
    ffi.Pointer<pa_cvolume> a,
    int v,
  ) {
    return _pa_cvolume_channels_equal_to(
      a,
      v,
    );
  }

  late final _pa_cvolume_channels_equal_toPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_cvolume>,
              pa_volume_t)>>('pa_cvolume_channels_equal_to');
  late final _pa_cvolume_channels_equal_to = _pa_cvolume_channels_equal_toPtr
      .asFunction<int Function(ffi.Pointer<pa_cvolume>, int)>();

  int pa_sw_volume_multiply(
    int a,
    int b,
  ) {
    return _pa_sw_volume_multiply(
      a,
      b,
    );
  }

  late final _pa_sw_volume_multiplyPtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(pa_volume_t, pa_volume_t)>>(
      'pa_sw_volume_multiply');
  late final _pa_sw_volume_multiply =
      _pa_sw_volume_multiplyPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_multiply(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_sw_cvolume_multiply(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_multiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_sw_cvolume_multiply');
  late final _pa_sw_cvolume_multiply = _pa_sw_cvolume_multiplyPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_multiply_scalar(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    int b,
  ) {
    return _pa_sw_cvolume_multiply_scalar(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_multiply_scalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              pa_volume_t)>>('pa_sw_cvolume_multiply_scalar');
  late final _pa_sw_cvolume_multiply_scalar =
      _pa_sw_cvolume_multiply_scalarPtr.asFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>, int)>();

  int pa_sw_volume_divide(
    int a,
    int b,
  ) {
    return _pa_sw_volume_divide(
      a,
      b,
    );
  }

  late final _pa_sw_volume_dividePtr = _lookup<
          ffi.NativeFunction<pa_volume_t Function(pa_volume_t, pa_volume_t)>>(
      'pa_sw_volume_divide');
  late final _pa_sw_volume_divide =
      _pa_sw_volume_dividePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_divide(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_sw_cvolume_divide(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_dividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_sw_cvolume_divide');
  late final _pa_sw_cvolume_divide = _pa_sw_cvolume_dividePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_sw_cvolume_divide_scalar(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    int b,
  ) {
    return _pa_sw_cvolume_divide_scalar(
      dest,
      a,
      b,
    );
  }

  late final _pa_sw_cvolume_divide_scalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              pa_volume_t)>>('pa_sw_cvolume_divide_scalar');
  late final _pa_sw_cvolume_divide_scalar =
      _pa_sw_cvolume_divide_scalarPtr.asFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>, int)>();

  int pa_sw_volume_from_dB(
    double f,
  ) {
    return _pa_sw_volume_from_dB(
      f,
    );
  }

  late final _pa_sw_volume_from_dBPtr =
      _lookup<ffi.NativeFunction<pa_volume_t Function(ffi.Double)>>(
          'pa_sw_volume_from_dB');
  late final _pa_sw_volume_from_dB =
      _pa_sw_volume_from_dBPtr.asFunction<int Function(double)>();

  double pa_sw_volume_to_dB(
    int v,
  ) {
    return _pa_sw_volume_to_dB(
      v,
    );
  }

  late final _pa_sw_volume_to_dBPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(pa_volume_t)>>(
          'pa_sw_volume_to_dB');
  late final _pa_sw_volume_to_dB =
      _pa_sw_volume_to_dBPtr.asFunction<double Function(int)>();

  int pa_sw_volume_from_linear(
    double v,
  ) {
    return _pa_sw_volume_from_linear(
      v,
    );
  }

  late final _pa_sw_volume_from_linearPtr =
      _lookup<ffi.NativeFunction<pa_volume_t Function(ffi.Double)>>(
          'pa_sw_volume_from_linear');
  late final _pa_sw_volume_from_linear =
      _pa_sw_volume_from_linearPtr.asFunction<int Function(double)>();

  double pa_sw_volume_to_linear(
    int v,
  ) {
    return _pa_sw_volume_to_linear(
      v,
    );
  }

  late final _pa_sw_volume_to_linearPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(pa_volume_t)>>(
          'pa_sw_volume_to_linear');
  late final _pa_sw_volume_to_linear =
      _pa_sw_volume_to_linearPtr.asFunction<double Function(int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_remap(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> from,
    ffi.Pointer<pa_channel_map> to,
  ) {
    return _pa_cvolume_remap(
      v,
      from,
      to,
    );
  }

  late final _pa_cvolume_remapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_remap');
  late final _pa_cvolume_remap = _pa_cvolume_remapPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_channel_map>, ffi.Pointer<pa_channel_map>)>();

  int pa_cvolume_compatible(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_sample_spec> ss,
  ) {
    return _pa_cvolume_compatible(
      v,
      ss,
    );
  }

  late final _pa_cvolume_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_sample_spec>)>>('pa_cvolume_compatible');
  late final _pa_cvolume_compatible = _pa_cvolume_compatiblePtr.asFunction<
      int Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_sample_spec>)>();

  int pa_cvolume_compatible_with_channel_map(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> cm,
  ) {
    return _pa_cvolume_compatible_with_channel_map(
      v,
      cm,
    );
  }

  late final _pa_cvolume_compatible_with_channel_mapPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>>(
      'pa_cvolume_compatible_with_channel_map');
  late final _pa_cvolume_compatible_with_channel_map =
      _pa_cvolume_compatible_with_channel_mapPtr.asFunction<
          int Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  double pa_cvolume_get_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_cvolume_get_balance(
      v,
      map,
    );
  }

  late final _pa_cvolume_get_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_get_balance');
  late final _pa_cvolume_get_balance = _pa_cvolume_get_balancePtr.asFunction<
      double Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
    double new_balance,
  ) {
    return _pa_cvolume_set_balance(
      v,
      map,
      new_balance,
    );
  }

  late final _pa_cvolume_set_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Float)>>('pa_cvolume_set_balance');
  late final _pa_cvolume_set_balance = _pa_cvolume_set_balancePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, double)>();

  double pa_cvolume_get_fade(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_cvolume_get_fade(
      v,
      map,
    );
  }

  late final _pa_cvolume_get_fadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_get_fade');
  late final _pa_cvolume_get_fade = _pa_cvolume_get_fadePtr.asFunction<
      double Function(ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_fade(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
    double new_fade,
  ) {
    return _pa_cvolume_set_fade(
      v,
      map,
      new_fade,
    );
  }

  late final _pa_cvolume_set_fadePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>, ffi.Float)>>('pa_cvolume_set_fade');
  late final _pa_cvolume_set_fade = _pa_cvolume_set_fadePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, double)>();

  double pa_cvolume_get_lfe_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_cvolume_get_lfe_balance(
      v,
      map,
    );
  }

  late final _pa_cvolume_get_lfe_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>)>>('pa_cvolume_get_lfe_balance');
  late final _pa_cvolume_get_lfe_balance =
      _pa_cvolume_get_lfe_balancePtr.asFunction<
          double Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_lfe_balance(
    ffi.Pointer<pa_cvolume> v,
    ffi.Pointer<pa_channel_map> map,
    double new_balance,
  ) {
    return _pa_cvolume_set_lfe_balance(
      v,
      map,
      new_balance,
    );
  }

  late final _pa_cvolume_set_lfe_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Float)>>('pa_cvolume_set_lfe_balance');
  late final _pa_cvolume_set_lfe_balance =
      _pa_cvolume_set_lfe_balancePtr.asFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, double)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_scale(
    ffi.Pointer<pa_cvolume> v,
    int max,
  ) {
    return _pa_cvolume_scale(
      v,
      max,
    );
  }

  late final _pa_cvolume_scalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, pa_volume_t)>>('pa_cvolume_scale');
  late final _pa_cvolume_scale = _pa_cvolume_scalePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_scale_mask(
    ffi.Pointer<pa_cvolume> v,
    int max,
    ffi.Pointer<pa_channel_map> cm,
    int mask,
  ) {
    return _pa_cvolume_scale_mask(
      v,
      max,
      cm,
      mask,
    );
  }

  late final _pa_cvolume_scale_maskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              pa_volume_t,
              ffi.Pointer<pa_channel_map>,
              pa_channel_position_mask_t)>>('pa_cvolume_scale_mask');
  late final _pa_cvolume_scale_mask = _pa_cvolume_scale_maskPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, int, ffi.Pointer<pa_channel_map>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_set_position(
    ffi.Pointer<pa_cvolume> cv,
    ffi.Pointer<pa_channel_map> map,
    pa_channel_position t,
    Dartpa_volume_t v,
  ) {
    return _pa_cvolume_set_position(
      cv,
      map,
      t.value,
      v,
    );
  }

  late final _pa_cvolume_set_positionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Int,
              pa_volume_t)>>('pa_cvolume_set_position');
  late final _pa_cvolume_set_position = _pa_cvolume_set_positionPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int, int)>();

  Dartpa_volume_t pa_cvolume_get_position(
    ffi.Pointer<pa_cvolume> cv,
    ffi.Pointer<pa_channel_map> map,
    pa_channel_position t,
  ) {
    return _pa_cvolume_get_position(
      cv,
      map,
      t.value,
    );
  }

  late final _pa_cvolume_get_positionPtr = _lookup<
      ffi.NativeFunction<
          pa_volume_t Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_channel_map>,
              ffi.Int)>>('pa_cvolume_get_position');
  late final _pa_cvolume_get_position = _pa_cvolume_get_positionPtr.asFunction<
      int Function(
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_channel_map>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_merge(
    ffi.Pointer<pa_cvolume> dest,
    ffi.Pointer<pa_cvolume> a,
    ffi.Pointer<pa_cvolume> b,
  ) {
    return _pa_cvolume_merge(
      dest,
      a,
      b,
    );
  }

  late final _pa_cvolume_mergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_cvolume>)>>('pa_cvolume_merge');
  late final _pa_cvolume_merge = _pa_cvolume_mergePtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>,
          ffi.Pointer<pa_cvolume>, ffi.Pointer<pa_cvolume>)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_inc_clamp(
    ffi.Pointer<pa_cvolume> v,
    int inc,
    int limit,
  ) {
    return _pa_cvolume_inc_clamp(
      v,
      inc,
      limit,
    );
  }

  late final _pa_cvolume_inc_clampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, pa_volume_t,
              pa_volume_t)>>('pa_cvolume_inc_clamp');
  late final _pa_cvolume_inc_clamp = _pa_cvolume_inc_clampPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_inc(
    ffi.Pointer<pa_cvolume> v,
    int inc,
  ) {
    return _pa_cvolume_inc(
      v,
      inc,
    );
  }

  late final _pa_cvolume_incPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, pa_volume_t)>>('pa_cvolume_inc');
  late final _pa_cvolume_inc = _pa_cvolume_incPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int)>();

  ffi.Pointer<pa_cvolume> pa_cvolume_dec(
    ffi.Pointer<pa_cvolume> v,
    int dec,
  ) {
    return _pa_cvolume_dec(
      v,
      dec,
    );
  }

  late final _pa_cvolume_decPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_cvolume> Function(
              ffi.Pointer<pa_cvolume>, pa_volume_t)>>('pa_cvolume_dec');
  late final _pa_cvolume_dec = _pa_cvolume_decPtr.asFunction<
      ffi.Pointer<pa_cvolume> Function(ffi.Pointer<pa_cvolume>, int)>();

  ffi.Pointer<pa_stream> pa_stream_new(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
  ) {
    return _pa_stream_new(
      c,
      name,
      ss,
      map,
    );
  }

  late final _pa_stream_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>)>>('pa_stream_new');
  late final _pa_stream_new = _pa_stream_newPtr.asFunction<
      ffi.Pointer<pa_stream> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<pa_sample_spec>,
          ffi.Pointer<pa_channel_map>)>();

  ffi.Pointer<pa_stream> pa_stream_new_with_proplist(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_sample_spec> ss,
    ffi.Pointer<pa_channel_map> map,
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_stream_new_with_proplist(
      c,
      name,
      ss,
      map,
      p,
    );
  }

  late final _pa_stream_new_with_proplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_proplist>)>>('pa_stream_new_with_proplist');
  late final _pa_stream_new_with_proplist =
      _pa_stream_new_with_proplistPtr.asFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_sample_spec>,
              ffi.Pointer<pa_channel_map>,
              ffi.Pointer<pa_proplist>)>();

  ffi.Pointer<pa_stream> pa_stream_new_extended(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<pa_format_info>> formats,
    int n_formats,
    ffi.Pointer<pa_proplist> p,
  ) {
    return _pa_stream_new_extended(
      c,
      name,
      formats,
      n_formats,
      p,
    );
  }

  late final _pa_stream_new_extendedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<pa_format_info>>,
              ffi.UnsignedInt,
              ffi.Pointer<pa_proplist>)>>('pa_stream_new_extended');
  late final _pa_stream_new_extended = _pa_stream_new_extendedPtr.asFunction<
      ffi.Pointer<pa_stream> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<pa_format_info>>,
          int,
          ffi.Pointer<pa_proplist>)>();

  void pa_stream_unref(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_unref(
      s,
    );
  }

  late final _pa_stream_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_unref');
  late final _pa_stream_unref =
      _pa_stream_unrefPtr.asFunction<void Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_stream> pa_stream_ref(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_ref(
      s,
    );
  }

  late final _pa_stream_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_stream> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_ref');
  late final _pa_stream_ref = _pa_stream_refPtr
      .asFunction<ffi.Pointer<pa_stream> Function(ffi.Pointer<pa_stream>)>();

  pa_stream_state pa_stream_get_state(
    ffi.Pointer<pa_stream> p,
  ) {
    return pa_stream_state.fromValue(_pa_stream_get_state(
      p,
    ));
  }

  late final _pa_stream_get_statePtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<pa_stream>)>>(
      'pa_stream_get_state');
  late final _pa_stream_get_state = _pa_stream_get_statePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_context> pa_stream_get_context(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_get_context(
      p,
    );
  }

  late final _pa_stream_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_context> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_context');
  late final _pa_stream_get_context = _pa_stream_get_contextPtr
      .asFunction<ffi.Pointer<pa_context> Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_get_index(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_index(
      s,
    );
  }

  late final _pa_stream_get_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_index');
  late final _pa_stream_get_index = _pa_stream_get_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_get_device_index(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_device_index(
      s,
    );
  }

  late final _pa_stream_get_device_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_device_index');
  late final _pa_stream_get_device_index = _pa_stream_get_device_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<ffi.Char> pa_stream_get_device_name(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_device_name(
      s,
    );
  }

  late final _pa_stream_get_device_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_device_name');
  late final _pa_stream_get_device_name = _pa_stream_get_device_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_is_suspended(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_is_suspended(
      s,
    );
  }

  late final _pa_stream_is_suspendedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_is_suspended');
  late final _pa_stream_is_suspended = _pa_stream_is_suspendedPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_is_corked(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_is_corked(
      s,
    );
  }

  late final _pa_stream_is_corkedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_is_corked');
  late final _pa_stream_is_corked = _pa_stream_is_corkedPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_connect_playback(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Char> dev,
    ffi.Pointer<pa_buffer_attr> attr,
    pa_stream_flags flags,
    ffi.Pointer<pa_cvolume> volume,
    ffi.Pointer<pa_stream> sync_stream,
  ) {
    return _pa_stream_connect_playback(
      s,
      dev,
      attr,
      flags.value,
      volume,
      sync_stream,
    );
  }

  late final _pa_stream_connect_playbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_buffer_attr>,
              ffi.UnsignedInt,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_stream>)>>('pa_stream_connect_playback');
  late final _pa_stream_connect_playback =
      _pa_stream_connect_playbackPtr.asFunction<
          int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_buffer_attr>,
              int,
              ffi.Pointer<pa_cvolume>,
              ffi.Pointer<pa_stream>)>();

  int pa_stream_connect_record(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Char> dev,
    ffi.Pointer<pa_buffer_attr> attr,
    pa_stream_flags flags,
  ) {
    return _pa_stream_connect_record(
      s,
      dev,
      attr,
      flags.value,
    );
  }

  late final _pa_stream_connect_recordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_buffer_attr>,
              ffi.UnsignedInt)>>('pa_stream_connect_record');
  late final _pa_stream_connect_record =
      _pa_stream_connect_recordPtr.asFunction<
          int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_buffer_attr>, int)>();

  int pa_stream_disconnect(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_disconnect(
      s,
    );
  }

  late final _pa_stream_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_disconnect');
  late final _pa_stream_disconnect = _pa_stream_disconnectPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_begin_write(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Size> nbytes,
  ) {
    return _pa_stream_begin_write(
      p,
      data,
      nbytes,
    );
  }

  late final _pa_stream_begin_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pa_stream_begin_write');
  late final _pa_stream_begin_write = _pa_stream_begin_writePtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Size>)>();

  int pa_stream_cancel_write(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_cancel_write(
      p,
    );
  }

  late final _pa_stream_cancel_writePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_cancel_write');
  late final _pa_stream_cancel_write = _pa_stream_cancel_writePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_write(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
    pa_free_cb_t free_cb,
    int offset,
    pa_seek_mode seek,
  ) {
    return _pa_stream_write(
      p,
      data,
      nbytes,
      free_cb,
      offset,
      seek.value,
    );
  }

  late final _pa_stream_writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              pa_free_cb_t,
              ffi.Int64,
              ffi.UnsignedInt)>>('pa_stream_write');
  late final _pa_stream_write = _pa_stream_writePtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Void>, int,
          pa_free_cb_t, int, int)>();

  int pa_stream_write_ext_free(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Void> data,
    int nbytes,
    pa_free_cb_t free_cb,
    ffi.Pointer<ffi.Void> free_cb_data,
    int offset,
    pa_seek_mode seek,
  ) {
    return _pa_stream_write_ext_free(
      p,
      data,
      nbytes,
      free_cb,
      free_cb_data,
      offset,
      seek.value,
    );
  }

  late final _pa_stream_write_ext_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              pa_free_cb_t,
              ffi.Pointer<ffi.Void>,
              ffi.Int64,
              ffi.UnsignedInt)>>('pa_stream_write_ext_free');
  late final _pa_stream_write_ext_free =
      _pa_stream_write_ext_freePtr.asFunction<
          int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Void>, int,
              pa_free_cb_t, ffi.Pointer<ffi.Void>, int, int)>();

  int pa_stream_peek(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.Size> nbytes,
  ) {
    return _pa_stream_peek(
      p,
      data,
      nbytes,
    );
  }

  late final _pa_stream_peekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pa_stream_peek');
  late final _pa_stream_peek = _pa_stream_peekPtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Size>)>();

  int pa_stream_drop(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_drop(
      p,
    );
  }

  late final _pa_stream_dropPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_drop');
  late final _pa_stream_drop =
      _pa_stream_dropPtr.asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_writable_size(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_writable_size(
      p,
    );
  }

  late final _pa_stream_writable_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_writable_size');
  late final _pa_stream_writable_size = _pa_stream_writable_sizePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  int pa_stream_readable_size(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_readable_size(
      p,
    );
  }

  late final _pa_stream_readable_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_readable_size');
  late final _pa_stream_readable_size = _pa_stream_readable_sizePtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_stream_drain(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_drain(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_drainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_drain');
  late final _pa_stream_drain = _pa_stream_drainPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_update_timing_info(
    ffi.Pointer<pa_stream> p,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_update_timing_info(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_update_timing_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_update_timing_info');
  late final _pa_stream_update_timing_info =
      _pa_stream_update_timing_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_state_callback(
    ffi.Pointer<pa_stream> s,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_state_callback(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_state_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_state_callback');
  late final _pa_stream_set_state_callback =
      _pa_stream_set_state_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_write_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_request_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_write_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_write_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_write_callback');
  late final _pa_stream_set_write_callback =
      _pa_stream_set_write_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_read_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_request_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_read_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_read_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_read_callback');
  late final _pa_stream_set_read_callback =
      _pa_stream_set_read_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_request_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_overflow_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_overflow_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_overflow_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_overflow_callback');
  late final _pa_stream_set_overflow_callback =
      _pa_stream_set_overflow_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_stream_get_underflow_index(
    ffi.Pointer<pa_stream> p,
  ) {
    return _pa_stream_get_underflow_index(
      p,
    );
  }

  late final _pa_stream_get_underflow_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_underflow_index');
  late final _pa_stream_get_underflow_index = _pa_stream_get_underflow_indexPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  void pa_stream_set_underflow_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_underflow_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_underflow_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_underflow_callback');
  late final _pa_stream_set_underflow_callback =
      _pa_stream_set_underflow_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_started_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_started_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_started_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_started_callback');
  late final _pa_stream_set_started_callback =
      _pa_stream_set_started_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_latency_update_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_latency_update_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_latency_update_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_latency_update_callback');
  late final _pa_stream_set_latency_update_callback =
      _pa_stream_set_latency_update_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_moved_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_moved_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_moved_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_moved_callback');
  late final _pa_stream_set_moved_callback =
      _pa_stream_set_moved_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_suspended_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_suspended_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_suspended_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_suspended_callback');
  late final _pa_stream_set_suspended_callback =
      _pa_stream_set_suspended_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_event_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_event_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_event_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_event_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_event_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_event_callback');
  late final _pa_stream_set_event_callback =
      _pa_stream_set_event_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_event_cb_t,
              ffi.Pointer<ffi.Void>)>();

  void pa_stream_set_buffer_attr_callback(
    ffi.Pointer<pa_stream> p,
    pa_stream_notify_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_buffer_attr_callback(
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_buffer_attr_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_buffer_attr_callback');
  late final _pa_stream_set_buffer_attr_callback =
      _pa_stream_set_buffer_attr_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_stream>, pa_stream_notify_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_cork(
    ffi.Pointer<pa_stream> s,
    int b,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_cork(
      s,
      b,
      cb,
      userdata,
    );
  }

  late final _pa_stream_corkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Int,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_cork');
  late final _pa_stream_cork = _pa_stream_corkPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>, int,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_flush(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_flush(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_flushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_flush');
  late final _pa_stream_flush = _pa_stream_flushPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_prebuf(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_prebuf(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_prebufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_prebuf');
  late final _pa_stream_prebuf = _pa_stream_prebufPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_trigger(
    ffi.Pointer<pa_stream> s,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_trigger(
      s,
      cb,
      userdata,
    );
  }

  late final _pa_stream_triggerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_trigger');
  late final _pa_stream_trigger = _pa_stream_triggerPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>,
          pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_set_name(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Char> name,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_name(
      s,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Char>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_name');
  late final _pa_stream_set_name = _pa_stream_set_namePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_stream>,
          ffi.Pointer<ffi.Char>,
          pa_stream_success_cb_t,
          ffi.Pointer<ffi.Void>)>();

  int pa_stream_get_time(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<pa_usec_t> r_usec,
  ) {
    return _pa_stream_get_time(
      s,
      r_usec,
    );
  }

  late final _pa_stream_get_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_stream>,
              ffi.Pointer<pa_usec_t>)>>('pa_stream_get_time');
  late final _pa_stream_get_time = _pa_stream_get_timePtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<pa_usec_t>)>();

  int pa_stream_get_latency(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<pa_usec_t> r_usec,
    ffi.Pointer<ffi.Int> negative,
  ) {
    return _pa_stream_get_latency(
      s,
      r_usec,
      negative,
    );
  }

  late final _pa_stream_get_latencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_stream>, ffi.Pointer<pa_usec_t>,
              ffi.Pointer<ffi.Int>)>>('pa_stream_get_latency');
  late final _pa_stream_get_latency = _pa_stream_get_latencyPtr.asFunction<
      int Function(ffi.Pointer<pa_stream>, ffi.Pointer<pa_usec_t>,
          ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<pa_timing_info> pa_stream_get_timing_info(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_timing_info(
      s,
    );
  }

  late final _pa_stream_get_timing_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_timing_info> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_timing_info');
  late final _pa_stream_get_timing_info =
      _pa_stream_get_timing_infoPtr.asFunction<
          ffi.Pointer<pa_timing_info> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_sample_spec> pa_stream_get_sample_spec(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_sample_spec(
      s,
    );
  }

  late final _pa_stream_get_sample_specPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_sample_spec> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_sample_spec');
  late final _pa_stream_get_sample_spec =
      _pa_stream_get_sample_specPtr.asFunction<
          ffi.Pointer<pa_sample_spec> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_channel_map> pa_stream_get_channel_map(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_channel_map(
      s,
    );
  }

  late final _pa_stream_get_channel_mapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_channel_map> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_channel_map');
  late final _pa_stream_get_channel_map =
      _pa_stream_get_channel_mapPtr.asFunction<
          ffi.Pointer<pa_channel_map> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_format_info> pa_stream_get_format_info(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_format_info(
      s,
    );
  }

  late final _pa_stream_get_format_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_format_info> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_format_info');
  late final _pa_stream_get_format_info =
      _pa_stream_get_format_infoPtr.asFunction<
          ffi.Pointer<pa_format_info> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_buffer_attr> pa_stream_get_buffer_attr(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_buffer_attr(
      s,
    );
  }

  late final _pa_stream_get_buffer_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_buffer_attr> Function(
              ffi.Pointer<pa_stream>)>>('pa_stream_get_buffer_attr');
  late final _pa_stream_get_buffer_attr =
      _pa_stream_get_buffer_attrPtr.asFunction<
          ffi.Pointer<pa_buffer_attr> Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_stream_set_buffer_attr(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<pa_buffer_attr> attr,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_set_buffer_attr(
      s,
      attr,
      cb,
      userdata,
    );
  }

  late final _pa_stream_set_buffer_attrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<pa_buffer_attr>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_set_buffer_attr');
  late final _pa_stream_set_buffer_attr =
      _pa_stream_set_buffer_attrPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<pa_buffer_attr>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_update_sample_rate(
    ffi.Pointer<pa_stream> s,
    int rate,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_update_sample_rate(
      s,
      rate,
      cb,
      userdata,
    );
  }

  late final _pa_stream_update_sample_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Uint32,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_update_sample_rate');
  late final _pa_stream_update_sample_rate =
      _pa_stream_update_sample_ratePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_stream>, int,
              pa_stream_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_proplist_update(
    ffi.Pointer<pa_stream> s,
    pa_update_mode mode,
    ffi.Pointer<pa_proplist> p,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_proplist_update(
      s,
      mode.value,
      p,
      cb,
      userdata,
    );
  }

  late final _pa_stream_proplist_updatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.UnsignedInt,
              ffi.Pointer<pa_proplist>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_proplist_update');
  late final _pa_stream_proplist_update =
      _pa_stream_proplist_updatePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              int,
              ffi.Pointer<pa_proplist>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_stream_proplist_remove(
    ffi.Pointer<pa_stream> s,
    ffi.Pointer<ffi.Pointer<ffi.Char>> keys,
    pa_stream_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_stream_proplist_remove(
      s,
      keys,
      cb,
      userdata,
    );
  }

  late final _pa_stream_proplist_removePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_stream_proplist_remove');
  late final _pa_stream_proplist_remove =
      _pa_stream_proplist_removePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_stream>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              pa_stream_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_stream_set_monitor_stream(
    ffi.Pointer<pa_stream> s,
    int sink_input_idx,
  ) {
    return _pa_stream_set_monitor_stream(
      s,
      sink_input_idx,
    );
  }

  late final _pa_stream_set_monitor_streamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_stream>,
              ffi.Uint32)>>('pa_stream_set_monitor_stream');
  late final _pa_stream_set_monitor_stream = _pa_stream_set_monitor_streamPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>, int)>();

  int pa_stream_get_monitor_stream(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_get_monitor_stream(
      s,
    );
  }

  late final _pa_stream_get_monitor_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_get_monitor_stream');
  late final _pa_stream_get_monitor_stream = _pa_stream_get_monitor_streamPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_sink_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_info_by_name');
  late final _pa_context_get_sink_info_by_name =
      _pa_context_get_sink_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_sink_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_info_by_index');
  late final _pa_context_get_sink_info_by_index =
      _pa_context_get_sink_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_sink_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_info_list(
    ffi.Pointer<pa_context> c,
    pa_sink_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_sink_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_info_list');
  late final _pa_context_get_sink_info_list =
      _pa_context_get_sink_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_sink_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_volume_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_volume_by_index(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_volume_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_volume_by_index');
  late final _pa_context_set_sink_volume_by_index =
      _pa_context_set_sink_volume_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_volume_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_volume_by_name(
      c,
      name,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_volume_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_volume_by_name');
  late final _pa_context_set_sink_volume_by_name =
      _pa_context_set_sink_volume_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_mute_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_mute_by_index(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_mute_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_mute_by_index');
  late final _pa_context_set_sink_mute_by_index =
      _pa_context_set_sink_mute_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_mute_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_mute_by_name(
      c,
      name,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_mute_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_mute_by_name');
  late final _pa_context_set_sink_mute_by_name =
      _pa_context_set_sink_mute_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_sink_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> sink_name,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_sink_by_name(
      c,
      sink_name,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_sink_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_sink_by_name');
  late final _pa_context_suspend_sink_by_name =
      _pa_context_suspend_sink_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_sink_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_sink_by_index(
      c,
      idx,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_sink_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_sink_by_index');
  late final _pa_context_suspend_sink_by_index =
      _pa_context_suspend_sink_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_port_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Char> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_port_by_index(
      c,
      idx,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_port_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_port_by_index');
  late final _pa_context_set_sink_port_by_index =
      _pa_context_set_sink_port_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_port_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_port_by_name(
      c,
      name,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_port_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_port_by_name');
  late final _pa_context_set_sink_port_by_name =
      _pa_context_set_sink_port_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_source_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_info_by_name');
  late final _pa_context_get_source_info_by_name =
      _pa_context_get_source_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_source_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_info_by_index');
  late final _pa_context_get_source_info_by_index =
      _pa_context_get_source_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_source_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_info_list(
    ffi.Pointer<pa_context> c,
    pa_source_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_source_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_info_list');
  late final _pa_context_get_source_info_list =
      _pa_context_get_source_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_source_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_volume_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_volume_by_index(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_volume_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_volume_by_index');
  late final _pa_context_set_source_volume_by_index =
      _pa_context_set_source_volume_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_volume_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_volume_by_name(
      c,
      name,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_volume_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_volume_by_name');
  late final _pa_context_set_source_volume_by_name =
      _pa_context_set_source_volume_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_mute_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_mute_by_index(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_mute_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_mute_by_index');
  late final _pa_context_set_source_mute_by_index =
      _pa_context_set_source_mute_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_mute_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_mute_by_name(
      c,
      name,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_mute_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_mute_by_name');
  late final _pa_context_set_source_mute_by_name =
      _pa_context_set_source_mute_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_source_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> source_name,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_source_by_name(
      c,
      source_name,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_source_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_source_by_name');
  late final _pa_context_suspend_source_by_name =
      _pa_context_suspend_source_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_suspend_source_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int suspend,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_suspend_source_by_index(
      c,
      idx,
      suspend,
      cb,
      userdata,
    );
  }

  late final _pa_context_suspend_source_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_suspend_source_by_index');
  late final _pa_context_suspend_source_by_index =
      _pa_context_suspend_source_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_port_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Char> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_port_by_index(
      c,
      idx,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_port_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_port_by_index');
  late final _pa_context_set_source_port_by_index =
      _pa_context_set_source_port_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_port_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> port,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_port_by_name(
      c,
      name,
      port,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_port_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_port_by_name');
  late final _pa_context_set_source_port_by_name =
      _pa_context_set_source_port_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_server_info(
    ffi.Pointer<pa_context> c,
    pa_server_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_server_info(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_server_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_server_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_server_info');
  late final _pa_context_get_server_info =
      _pa_context_get_server_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_server_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_module_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_module_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_module_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_module_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_module_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_module_info');
  late final _pa_context_get_module_info =
      _pa_context_get_module_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_module_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_module_info_list(
    ffi.Pointer<pa_context> c,
    pa_module_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_module_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_module_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_module_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_module_info_list');
  late final _pa_context_get_module_info_list =
      _pa_context_get_module_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_module_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_load_module(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> argument,
    pa_context_index_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_load_module(
      c,
      name,
      argument,
      cb,
      userdata,
    );
  }

  late final _pa_context_load_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_index_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_load_module');
  late final _pa_context_load_module = _pa_context_load_modulePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          pa_context_index_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_unload_module(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_unload_module(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_unload_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_unload_module');
  late final _pa_context_unload_module =
      _pa_context_unload_modulePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_send_message_to_object(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> recipient_name,
    ffi.Pointer<ffi.Char> message,
    ffi.Pointer<ffi.Char> message_parameters,
    pa_context_string_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_send_message_to_object(
      c,
      recipient_name,
      message,
      message_parameters,
      cb,
      userdata,
    );
  }

  late final _pa_context_send_message_to_objectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_string_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_send_message_to_object');
  late final _pa_context_send_message_to_object =
      _pa_context_send_message_to_objectPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_string_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_client_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_client_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_client_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_client_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_client_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_client_info');
  late final _pa_context_get_client_info =
      _pa_context_get_client_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_client_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_client_info_list(
    ffi.Pointer<pa_context> c,
    pa_client_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_client_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_client_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_client_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_client_info_list');
  late final _pa_context_get_client_info_list =
      _pa_context_get_client_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_client_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_kill_client(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_kill_client(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_kill_clientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_kill_client');
  late final _pa_context_kill_client = _pa_context_kill_clientPtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
          pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_card_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_card_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_card_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_card_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_card_info_by_index');
  late final _pa_context_get_card_info_by_index =
      _pa_context_get_card_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_card_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_card_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_card_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_card_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_card_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_card_info_by_name');
  late final _pa_context_get_card_info_by_name =
      _pa_context_get_card_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_card_info_list(
    ffi.Pointer<pa_context> c,
    pa_card_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_card_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_card_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_card_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_card_info_list');
  late final _pa_context_get_card_info_list =
      _pa_context_get_card_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_card_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_card_profile_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Char> profile,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_card_profile_by_index(
      c,
      idx,
      profile,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_card_profile_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_card_profile_by_index');
  late final _pa_context_set_card_profile_by_index =
      _pa_context_set_card_profile_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_card_profile_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> profile,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_card_profile_by_name(
      c,
      name,
      profile,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_card_profile_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_card_profile_by_name');
  late final _pa_context_set_card_profile_by_name =
      _pa_context_set_card_profile_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_port_latency_offset(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> card_name,
    ffi.Pointer<ffi.Char> port_name,
    int offset,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_port_latency_offset(
      c,
      card_name,
      port_name,
      offset,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_port_latency_offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int64,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_port_latency_offset');
  late final _pa_context_set_port_latency_offset =
      _pa_context_set_port_latency_offsetPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_input_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_sink_input_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_input_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_input_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_sink_input_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_input_info');
  late final _pa_context_get_sink_input_info =
      _pa_context_get_sink_input_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_sink_input_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sink_input_info_list(
    ffi.Pointer<pa_context> c,
    pa_sink_input_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sink_input_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sink_input_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_sink_input_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sink_input_info_list');
  late final _pa_context_get_sink_input_info_list =
      _pa_context_get_sink_input_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_sink_input_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_sink_input_by_name(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Char> sink_name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_sink_input_by_name(
      c,
      idx,
      sink_name,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_sink_input_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_move_sink_input_by_name');
  late final _pa_context_move_sink_input_by_name =
      _pa_context_move_sink_input_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_sink_input_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int sink_idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_sink_input_by_index(
      c,
      idx,
      sink_idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_sink_input_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_move_sink_input_by_index');
  late final _pa_context_move_sink_input_by_index =
      _pa_context_move_sink_input_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_input_volume(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_input_volume(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_input_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_input_volume');
  late final _pa_context_set_sink_input_volume =
      _pa_context_set_sink_input_volumePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_sink_input_mute(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_sink_input_mute(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_sink_input_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_sink_input_mute');
  late final _pa_context_set_sink_input_mute =
      _pa_context_set_sink_input_mutePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_kill_sink_input(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_kill_sink_input(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_kill_sink_inputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_kill_sink_input');
  late final _pa_context_kill_sink_input =
      _pa_context_kill_sink_inputPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_output_info(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_source_output_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_output_info(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_output_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_source_output_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_source_output_info');
  late final _pa_context_get_source_output_info =
      _pa_context_get_source_output_infoPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_source_output_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_source_output_info_list(
    ffi.Pointer<pa_context> c,
    pa_source_output_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_source_output_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_source_output_info_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
                  pa_source_output_info_cb_t, ffi.Pointer<ffi.Void>)>>(
      'pa_context_get_source_output_info_list');
  late final _pa_context_get_source_output_info_list =
      _pa_context_get_source_output_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_source_output_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_source_output_by_name(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<ffi.Char> source_name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_source_output_by_name(
      c,
      idx,
      source_name,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_source_output_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_move_source_output_by_name');
  late final _pa_context_move_source_output_by_name =
      _pa_context_move_source_output_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_move_source_output_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    int source_idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_move_source_output_by_index(
      c,
      idx,
      source_idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_move_source_output_by_indexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pa_operation> Function(
                  ffi.Pointer<pa_context>,
                  ffi.Uint32,
                  ffi.Uint32,
                  pa_context_success_cb_t,
                  ffi.Pointer<ffi.Void>)>>(
      'pa_context_move_source_output_by_index');
  late final _pa_context_move_source_output_by_index =
      _pa_context_move_source_output_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_output_volume(
    ffi.Pointer<pa_context> c,
    int idx,
    ffi.Pointer<pa_cvolume> volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_output_volume(
      c,
      idx,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_output_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_output_volume');
  late final _pa_context_set_source_output_volume =
      _pa_context_set_source_output_volumePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              int,
              ffi.Pointer<pa_cvolume>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_set_source_output_mute(
    ffi.Pointer<pa_context> c,
    int idx,
    int mute,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_source_output_mute(
      c,
      idx,
      mute,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_source_output_mutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              ffi.Int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_source_output_mute');
  late final _pa_context_set_source_output_mute =
      _pa_context_set_source_output_mutePtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_kill_source_output(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_kill_source_output(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_kill_source_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_kill_source_output');
  late final _pa_context_kill_source_output =
      _pa_context_kill_source_outputPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_stat(
    ffi.Pointer<pa_context> c,
    pa_stat_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_stat(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_statPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_stat_info_cb_t, ffi.Pointer<ffi.Void>)>>('pa_context_stat');
  late final _pa_context_stat = _pa_context_statPtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>, pa_stat_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sample_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_sample_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sample_info_by_name(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sample_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sample_info_by_name');
  late final _pa_context_get_sample_info_by_name =
      _pa_context_get_sample_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sample_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_sample_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sample_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sample_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sample_info_by_index');
  late final _pa_context_get_sample_info_by_index =
      _pa_context_get_sample_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_sample_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_sample_info_list(
    ffi.Pointer<pa_context> c,
    pa_sample_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_sample_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_sample_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_sample_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_sample_info_list');
  late final _pa_context_get_sample_info_list =
      _pa_context_get_sample_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_sample_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_autoload_info_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_autoload_type type,
    pa_autoload_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_autoload_info_by_name(
      c,
      name,
      type.value,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_autoload_info_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_autoload_info_by_name');
  late final _pa_context_get_autoload_info_by_name =
      _pa_context_get_autoload_info_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              int,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_autoload_info_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_autoload_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_autoload_info_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_autoload_info_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_autoload_info_by_index');
  late final _pa_context_get_autoload_info_by_index =
      _pa_context_get_autoload_info_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_autoload_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_get_autoload_info_list(
    ffi.Pointer<pa_context> c,
    pa_autoload_info_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_get_autoload_info_list(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_get_autoload_info_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              pa_autoload_info_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_get_autoload_info_list');
  late final _pa_context_get_autoload_info_list =
      _pa_context_get_autoload_info_listPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>,
              pa_autoload_info_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_add_autoload(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_autoload_type type,
    ffi.Pointer<ffi.Char> module,
    ffi.Pointer<ffi.Char> argument,
    pa_context_index_cb_t arg5,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_add_autoload(
      c,
      name,
      type.value,
      module,
      argument,
      arg5,
      userdata,
    );
  }

  late final _pa_context_add_autoloadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_context_index_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_add_autoload');
  late final _pa_context_add_autoload = _pa_context_add_autoloadPtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          pa_context_index_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_remove_autoload_by_name(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_autoload_type type,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_remove_autoload_by_name(
      c,
      name,
      type.value,
      cb,
      userdata,
    );
  }

  late final _pa_context_remove_autoload_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_remove_autoload_by_name');
  late final _pa_context_remove_autoload_by_name =
      _pa_context_remove_autoload_by_namePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              int,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_remove_autoload_by_index(
    ffi.Pointer<pa_context> c,
    int idx,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_remove_autoload_by_index(
      c,
      idx,
      cb,
      userdata,
    );
  }

  late final _pa_context_remove_autoload_by_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Uint32,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_remove_autoload_by_index');
  late final _pa_context_remove_autoload_by_index =
      _pa_context_remove_autoload_by_indexPtr.asFunction<
          ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
              pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_subscribe(
    ffi.Pointer<pa_context> c,
    pa_subscription_mask m,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_subscribe(
      c,
      m.value,
      cb,
      userdata,
    );
  }

  late final _pa_context_subscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.UnsignedInt,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_subscribe');
  late final _pa_context_subscribe = _pa_context_subscribePtr.asFunction<
      ffi.Pointer<pa_operation> Function(ffi.Pointer<pa_context>, int,
          pa_context_success_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_context_set_subscribe_callback(
    ffi.Pointer<pa_context> c,
    pa_context_subscribe_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_set_subscribe_callback(
      c,
      cb,
      userdata,
    );
  }

  late final _pa_context_set_subscribe_callbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_context>, pa_context_subscribe_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_set_subscribe_callback');
  late final _pa_context_set_subscribe_callback =
      _pa_context_set_subscribe_callbackPtr.asFunction<
          void Function(ffi.Pointer<pa_context>, pa_context_subscribe_cb_t,
              ffi.Pointer<ffi.Void>)>();

  int pa_stream_connect_upload(
    ffi.Pointer<pa_stream> s,
    int length,
  ) {
    return _pa_stream_connect_upload(
      s,
      length,
    );
  }

  late final _pa_stream_connect_uploadPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pa_stream>, ffi.Size)>>(
      'pa_stream_connect_upload');
  late final _pa_stream_connect_upload = _pa_stream_connect_uploadPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>, int)>();

  int pa_stream_finish_upload(
    ffi.Pointer<pa_stream> s,
  ) {
    return _pa_stream_finish_upload(
      s,
    );
  }

  late final _pa_stream_finish_uploadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_stream>)>>(
          'pa_stream_finish_upload');
  late final _pa_stream_finish_upload = _pa_stream_finish_uploadPtr
      .asFunction<int Function(ffi.Pointer<pa_stream>)>();

  ffi.Pointer<pa_operation> pa_context_remove_sample(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_remove_sample(
      c,
      name,
      cb,
      userdata,
    );
  }

  late final _pa_context_remove_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_remove_sample');
  late final _pa_context_remove_sample =
      _pa_context_remove_samplePtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_play_sample(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> dev,
    int volume,
    pa_context_success_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_play_sample(
      c,
      name,
      dev,
      volume,
      cb,
      userdata,
    );
  }

  late final _pa_context_play_samplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_volume_t,
              pa_context_success_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_play_sample');
  late final _pa_context_play_sample = _pa_context_play_samplePtr.asFunction<
      ffi.Pointer<pa_operation> Function(
          ffi.Pointer<pa_context>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          pa_context_success_cb_t,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_operation> pa_context_play_sample_with_proplist(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> dev,
    int volume,
    ffi.Pointer<pa_proplist> proplist,
    pa_context_play_sample_cb_t cb,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_context_play_sample_with_proplist(
      c,
      name,
      dev,
      volume,
      proplist,
      cb,
      userdata,
    );
  }

  late final _pa_context_play_sample_with_proplistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              pa_volume_t,
              ffi.Pointer<pa_proplist>,
              pa_context_play_sample_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_context_play_sample_with_proplist');
  late final _pa_context_play_sample_with_proplist =
      _pa_context_play_sample_with_proplistPtr.asFunction<
          ffi.Pointer<pa_operation> Function(
              ffi.Pointer<pa_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              ffi.Pointer<pa_proplist>,
              pa_context_play_sample_cb_t,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> pa_strerror(
    int error,
  ) {
    return _pa_strerror(
      error,
    );
  }

  late final _pa_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'pa_strerror');
  late final _pa_strerror =
      _pa_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Void> pa_xmalloc(
    int l,
  ) {
    return _pa_xmalloc(
      l,
    );
  }

  late final _pa_xmallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'pa_xmalloc');
  late final _pa_xmalloc =
      _pa_xmallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> pa_xmalloc0(
    int l,
  ) {
    return _pa_xmalloc0(
      l,
    );
  }

  late final _pa_xmalloc0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'pa_xmalloc0');
  late final _pa_xmalloc0 =
      _pa_xmalloc0Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> pa_xrealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _pa_xrealloc(
      ptr,
      size,
    );
  }

  late final _pa_xreallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('pa_xrealloc');
  late final _pa_xrealloc = _pa_xreallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void pa_xfree(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _pa_xfree(
      p,
    );
  }

  late final _pa_xfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pa_xfree');
  late final _pa_xfree =
      _pa_xfreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> pa_xstrdup(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _pa_xstrdup(
      s,
    );
  }

  late final _pa_xstrdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('pa_xstrdup');
  late final _pa_xstrdup = _pa_xstrdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_xstrndup(
    ffi.Pointer<ffi.Char> s,
    int l,
  ) {
    return _pa_xstrndup(
      s,
      l,
    );
  }

  late final _pa_xstrndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('pa_xstrndup');
  late final _pa_xstrndup = _pa_xstrndupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> pa_xmemdup(
    ffi.Pointer<ffi.Void> p,
    int l,
  ) {
    return _pa_xmemdup(
      p,
      l,
    );
  }

  late final _pa_xmemdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('pa_xmemdup');
  late final _pa_xmemdup = _pa_xmemdupPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> _pa_xnew_internal(
    int n,
    int k,
  ) {
    return __pa_xnew_internal(
      n,
      k,
    );
  }

  late final __pa_xnew_internalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      '_pa_xnew_internal');
  late final __pa_xnew_internal = __pa_xnew_internalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _pa_xnew0_internal(
    int n,
    int k,
  ) {
    return __pa_xnew0_internal(
      n,
      k,
    );
  }

  late final __pa_xnew0_internalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>(
      '_pa_xnew0_internal');
  late final __pa_xnew0_internal = __pa_xnew0_internalPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _pa_xnewdup_internal(
    ffi.Pointer<ffi.Void> p,
    int n,
    int k,
  ) {
    return __pa_xnewdup_internal(
      p,
      n,
      k,
    );
  }

  late final __pa_xnewdup_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size)>>('_pa_xnewdup_internal');
  late final __pa_xnewdup_internal = __pa_xnewdup_internalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _pa_xrenew_internal(
    ffi.Pointer<ffi.Void> p,
    int n,
    int k,
  ) {
    return __pa_xrenew_internal(
      p,
      n,
      k,
    );
  }

  late final __pa_xrenew_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size)>>('_pa_xrenew_internal');
  late final __pa_xrenew_internal = __pa_xrenew_internalPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Char> pa_utf8_valid(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_utf8_valid(
      str,
    );
  }

  late final _pa_utf8_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('pa_utf8_valid');
  late final _pa_utf8_valid = _pa_utf8_validPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_ascii_valid(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_ascii_valid(
      str,
    );
  }

  late final _pa_ascii_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('pa_ascii_valid');
  late final _pa_ascii_valid = _pa_ascii_validPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_utf8_filter(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_utf8_filter(
      str,
    );
  }

  late final _pa_utf8_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('pa_utf8_filter');
  late final _pa_utf8_filter = _pa_utf8_filterPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_ascii_filter(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_ascii_filter(
      str,
    );
  }

  late final _pa_ascii_filterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('pa_ascii_filter');
  late final _pa_ascii_filter = _pa_ascii_filterPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_utf8_to_locale(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_utf8_to_locale(
      str,
    );
  }

  late final _pa_utf8_to_localePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('pa_utf8_to_locale');
  late final _pa_utf8_to_locale = _pa_utf8_to_localePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> pa_locale_to_utf8(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _pa_locale_to_utf8(
      str,
    );
  }

  late final _pa_locale_to_utf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('pa_locale_to_utf8');
  late final _pa_locale_to_utf8 = _pa_locale_to_utf8Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<pa_threaded_mainloop> pa_threaded_mainloop_new() {
    return _pa_threaded_mainloop_new();
  }

  late final _pa_threaded_mainloop_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_threaded_mainloop> Function()>>(
          'pa_threaded_mainloop_new');
  late final _pa_threaded_mainloop_new = _pa_threaded_mainloop_newPtr
      .asFunction<ffi.Pointer<pa_threaded_mainloop> Function()>();

  void pa_threaded_mainloop_free(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_free(
      m,
    );
  }

  late final _pa_threaded_mainloop_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_free');
  late final _pa_threaded_mainloop_free = _pa_threaded_mainloop_freePtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  int pa_threaded_mainloop_start(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_start(
      m,
    );
  }

  late final _pa_threaded_mainloop_startPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_start');
  late final _pa_threaded_mainloop_start = _pa_threaded_mainloop_startPtr
      .asFunction<int Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_stop(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_stop(
      m,
    );
  }

  late final _pa_threaded_mainloop_stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_stop');
  late final _pa_threaded_mainloop_stop = _pa_threaded_mainloop_stopPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_lock(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_lock(
      m,
    );
  }

  late final _pa_threaded_mainloop_lockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_lock');
  late final _pa_threaded_mainloop_lock = _pa_threaded_mainloop_lockPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_unlock(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_unlock(
      m,
    );
  }

  late final _pa_threaded_mainloop_unlockPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_unlock');
  late final _pa_threaded_mainloop_unlock = _pa_threaded_mainloop_unlockPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_wait(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_wait(
      m,
    );
  }

  late final _pa_threaded_mainloop_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>)>>('pa_threaded_mainloop_wait');
  late final _pa_threaded_mainloop_wait = _pa_threaded_mainloop_waitPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_signal(
    ffi.Pointer<pa_threaded_mainloop> m,
    int wait_for_accept,
  ) {
    return _pa_threaded_mainloop_signal(
      m,
      wait_for_accept,
    );
  }

  late final _pa_threaded_mainloop_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>,
              ffi.Int)>>('pa_threaded_mainloop_signal');
  late final _pa_threaded_mainloop_signal = _pa_threaded_mainloop_signalPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>, int)>();

  void pa_threaded_mainloop_accept(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_accept(
      m,
    );
  }

  late final _pa_threaded_mainloop_acceptPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_accept');
  late final _pa_threaded_mainloop_accept = _pa_threaded_mainloop_acceptPtr
      .asFunction<void Function(ffi.Pointer<pa_threaded_mainloop>)>();

  int pa_threaded_mainloop_get_retval(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_get_retval(
      m,
    );
  }

  late final _pa_threaded_mainloop_get_retvalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_get_retval');
  late final _pa_threaded_mainloop_get_retval =
      _pa_threaded_mainloop_get_retvalPtr
          .asFunction<int Function(ffi.Pointer<pa_threaded_mainloop>)>();

  ffi.Pointer<pa_mainloop_api> pa_threaded_mainloop_get_api(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_get_api(
      m,
    );
  }

  late final _pa_threaded_mainloop_get_apiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pa_mainloop_api> Function(
                  ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_get_api');
  late final _pa_threaded_mainloop_get_api =
      _pa_threaded_mainloop_get_apiPtr.asFunction<
          ffi.Pointer<pa_mainloop_api> Function(
              ffi.Pointer<pa_threaded_mainloop>)>();

  int pa_threaded_mainloop_in_thread(
    ffi.Pointer<pa_threaded_mainloop> m,
  ) {
    return _pa_threaded_mainloop_in_thread(
      m,
    );
  }

  late final _pa_threaded_mainloop_in_threadPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pa_threaded_mainloop>)>>(
      'pa_threaded_mainloop_in_thread');
  late final _pa_threaded_mainloop_in_thread =
      _pa_threaded_mainloop_in_threadPtr
          .asFunction<int Function(ffi.Pointer<pa_threaded_mainloop>)>();

  void pa_threaded_mainloop_set_name(
    ffi.Pointer<pa_threaded_mainloop> m,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _pa_threaded_mainloop_set_name(
      m,
      name,
    );
  }

  late final _pa_threaded_mainloop_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_threaded_mainloop>,
              ffi.Pointer<ffi.Char>)>>('pa_threaded_mainloop_set_name');
  late final _pa_threaded_mainloop_set_name =
      _pa_threaded_mainloop_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<pa_threaded_mainloop>, ffi.Pointer<ffi.Char>)>();

  void pa_threaded_mainloop_once_unlocked(
    ffi.Pointer<pa_threaded_mainloop> m,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<pa_threaded_mainloop> m,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_threaded_mainloop_once_unlocked(
      m,
      callback,
      userdata,
    );
  }

  late final _pa_threaded_mainloop_once_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_threaded_mainloop>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<pa_threaded_mainloop> m,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>>('pa_threaded_mainloop_once_unlocked');
  late final _pa_threaded_mainloop_once_unlocked =
      _pa_threaded_mainloop_once_unlockedPtr.asFunction<
          void Function(
              ffi.Pointer<pa_threaded_mainloop>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<pa_threaded_mainloop> m,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<pa_mainloop> pa_mainloop_new() {
    return _pa_mainloop_new();
  }

  late final _pa_mainloop_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pa_mainloop> Function()>>(
          'pa_mainloop_new');
  late final _pa_mainloop_new =
      _pa_mainloop_newPtr.asFunction<ffi.Pointer<pa_mainloop> Function()>();

  void pa_mainloop_free(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_free(
      m,
    );
  }

  late final _pa_mainloop_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_free');
  late final _pa_mainloop_free = _pa_mainloop_freePtr
      .asFunction<void Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_prepare(
    ffi.Pointer<pa_mainloop> m,
    int timeout,
  ) {
    return _pa_mainloop_prepare(
      m,
      timeout,
    );
  }

  late final _pa_mainloop_preparePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pa_mainloop>, ffi.Int)>>(
      'pa_mainloop_prepare');
  late final _pa_mainloop_prepare = _pa_mainloop_preparePtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop>, int)>();

  int pa_mainloop_poll(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_poll(
      m,
    );
  }

  late final _pa_mainloop_pollPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_poll');
  late final _pa_mainloop_poll =
      _pa_mainloop_pollPtr.asFunction<int Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_dispatch(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_dispatch(
      m,
    );
  }

  late final _pa_mainloop_dispatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_dispatch');
  late final _pa_mainloop_dispatch = _pa_mainloop_dispatchPtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_get_retval(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_get_retval(
      m,
    );
  }

  late final _pa_mainloop_get_retvalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_get_retval');
  late final _pa_mainloop_get_retval = _pa_mainloop_get_retvalPtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop>)>();

  int pa_mainloop_iterate(
    ffi.Pointer<pa_mainloop> m,
    int block,
    ffi.Pointer<ffi.Int> retval,
  ) {
    return _pa_mainloop_iterate(
      m,
      block,
      retval,
    );
  }

  late final _pa_mainloop_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_mainloop>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pa_mainloop_iterate');
  late final _pa_mainloop_iterate = _pa_mainloop_iteratePtr.asFunction<
      int Function(ffi.Pointer<pa_mainloop>, int, ffi.Pointer<ffi.Int>)>();

  int pa_mainloop_run(
    ffi.Pointer<pa_mainloop> m,
    ffi.Pointer<ffi.Int> retval,
  ) {
    return _pa_mainloop_run(
      m,
      retval,
    );
  }

  late final _pa_mainloop_runPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pa_mainloop>,
              ffi.Pointer<ffi.Int>)>>('pa_mainloop_run');
  late final _pa_mainloop_run = _pa_mainloop_runPtr.asFunction<
      int Function(ffi.Pointer<pa_mainloop>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<pa_mainloop_api> pa_mainloop_get_api(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_get_api(
      m,
    );
  }

  late final _pa_mainloop_get_apiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_mainloop_api> Function(
              ffi.Pointer<pa_mainloop>)>>('pa_mainloop_get_api');
  late final _pa_mainloop_get_api = _pa_mainloop_get_apiPtr.asFunction<
      ffi.Pointer<pa_mainloop_api> Function(ffi.Pointer<pa_mainloop>)>();

  void pa_mainloop_quit(
    ffi.Pointer<pa_mainloop> m,
    int retval,
  ) {
    return _pa_mainloop_quit(
      m,
      retval,
    );
  }

  late final _pa_mainloop_quitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_mainloop>, ffi.Int)>>('pa_mainloop_quit');
  late final _pa_mainloop_quit = _pa_mainloop_quitPtr
      .asFunction<void Function(ffi.Pointer<pa_mainloop>, int)>();

  void pa_mainloop_wakeup(
    ffi.Pointer<pa_mainloop> m,
  ) {
    return _pa_mainloop_wakeup(
      m,
    );
  }

  late final _pa_mainloop_wakeupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_mainloop>)>>(
          'pa_mainloop_wakeup');
  late final _pa_mainloop_wakeup = _pa_mainloop_wakeupPtr
      .asFunction<void Function(ffi.Pointer<pa_mainloop>)>();

  void pa_mainloop_set_poll_func(
    ffi.Pointer<pa_mainloop> m,
    pa_poll_func poll_func,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_mainloop_set_poll_func(
      m,
      poll_func,
      userdata,
    );
  }

  late final _pa_mainloop_set_poll_funcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_mainloop>, pa_poll_func,
              ffi.Pointer<ffi.Void>)>>('pa_mainloop_set_poll_func');
  late final _pa_mainloop_set_poll_func =
      _pa_mainloop_set_poll_funcPtr.asFunction<
          void Function(
              ffi.Pointer<pa_mainloop>, pa_poll_func, ffi.Pointer<ffi.Void>)>();

  int pa_signal_init(
    ffi.Pointer<pa_mainloop_api> api,
  ) {
    return _pa_signal_init(
      api,
    );
  }

  late final _pa_signal_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pa_mainloop_api>)>>(
      'pa_signal_init');
  late final _pa_signal_init = _pa_signal_initPtr
      .asFunction<int Function(ffi.Pointer<pa_mainloop_api>)>();

  void pa_signal_done() {
    return _pa_signal_done();
  }

  late final _pa_signal_donePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pa_signal_done');
  late final _pa_signal_done = _pa_signal_donePtr.asFunction<void Function()>();

  ffi.Pointer<pa_signal_event> pa_signal_new(
    int sig,
    pa_signal_cb_t callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _pa_signal_new(
      sig,
      callback,
      userdata,
    );
  }

  late final _pa_signal_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pa_signal_event> Function(ffi.Int, pa_signal_cb_t,
              ffi.Pointer<ffi.Void>)>>('pa_signal_new');
  late final _pa_signal_new = _pa_signal_newPtr.asFunction<
      ffi.Pointer<pa_signal_event> Function(
          int, pa_signal_cb_t, ffi.Pointer<ffi.Void>)>();

  void pa_signal_free(
    ffi.Pointer<pa_signal_event> e,
  ) {
    return _pa_signal_free(
      e,
    );
  }

  late final _pa_signal_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_signal_event>)>>(
      'pa_signal_free');
  late final _pa_signal_free = _pa_signal_freePtr
      .asFunction<void Function(ffi.Pointer<pa_signal_event>)>();

  void pa_signal_set_destroy(
    ffi.Pointer<pa_signal_event> e,
    pa_signal_destroy_cb_t callback,
  ) {
    return _pa_signal_set_destroy(
      e,
      callback,
    );
  }

  late final _pa_signal_set_destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_signal_event>,
              pa_signal_destroy_cb_t)>>('pa_signal_set_destroy');
  late final _pa_signal_set_destroy = _pa_signal_set_destroyPtr.asFunction<
      void Function(ffi.Pointer<pa_signal_event>, pa_signal_destroy_cb_t)>();

  ffi.Pointer<ffi.Char> pa_get_user_name(
    ffi.Pointer<ffi.Char> s,
    int l,
  ) {
    return _pa_get_user_name(
      s,
      l,
    );
  }

  late final _pa_get_user_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('pa_get_user_name');
  late final _pa_get_user_name = _pa_get_user_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> pa_get_host_name(
    ffi.Pointer<ffi.Char> s,
    int l,
  ) {
    return _pa_get_host_name(
      s,
      l,
    );
  }

  late final _pa_get_host_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('pa_get_host_name');
  late final _pa_get_host_name = _pa_get_host_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> pa_get_fqdn(
    ffi.Pointer<ffi.Char> s,
    int l,
  ) {
    return _pa_get_fqdn(
      s,
      l,
    );
  }

  late final _pa_get_fqdnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('pa_get_fqdn');
  late final _pa_get_fqdn = _pa_get_fqdnPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> pa_get_home_dir(
    ffi.Pointer<ffi.Char> s,
    int l,
  ) {
    return _pa_get_home_dir(
      s,
      l,
    );
  }

  late final _pa_get_home_dirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('pa_get_home_dir');
  late final _pa_get_home_dir = _pa_get_home_dirPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> pa_get_binary_name(
    ffi.Pointer<ffi.Char> s,
    int l,
  ) {
    return _pa_get_binary_name(
      s,
      l,
    );
  }

  late final _pa_get_binary_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Size)>>('pa_get_binary_name');
  late final _pa_get_binary_name = _pa_get_binary_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> pa_path_get_filename(
    ffi.Pointer<ffi.Char> p,
  ) {
    return _pa_path_get_filename(
      p,
    );
  }

  late final _pa_path_get_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('pa_path_get_filename');
  late final _pa_path_get_filename = _pa_path_get_filenamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int pa_msleep(
    int t,
  ) {
    return _pa_msleep(
      t,
    );
  }

  late final _pa_msleepPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedLong)>>(
          'pa_msleep');
  late final _pa_msleep = _pa_msleepPtr.asFunction<int Function(int)>();

  int pa_thread_make_realtime(
    int rtprio,
  ) {
    return _pa_thread_make_realtime(
      rtprio,
    );
  }

  late final _pa_thread_make_realtimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'pa_thread_make_realtime');
  late final _pa_thread_make_realtime =
      _pa_thread_make_realtimePtr.asFunction<int Function(int)>();

  ffi.Pointer<timeval> pa_gettimeofday(
    ffi.Pointer<timeval> tv,
  ) {
    return _pa_gettimeofday(
      tv,
    );
  }

  late final _pa_gettimeofdayPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>)>>(
      'pa_gettimeofday');
  late final _pa_gettimeofday = _pa_gettimeofdayPtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>)>();

  int pa_timeval_diff(
    ffi.Pointer<timeval> a,
    ffi.Pointer<timeval> b,
  ) {
    return _pa_timeval_diff(
      a,
      b,
    );
  }

  late final _pa_timeval_diffPtr = _lookup<
      ffi.NativeFunction<
          pa_usec_t Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('pa_timeval_diff');
  late final _pa_timeval_diff = _pa_timeval_diffPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int pa_timeval_cmp(
    ffi.Pointer<timeval> a,
    ffi.Pointer<timeval> b,
  ) {
    return _pa_timeval_cmp(
      a,
      b,
    );
  }

  late final _pa_timeval_cmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timeval>, ffi.Pointer<timeval>)>>('pa_timeval_cmp');
  late final _pa_timeval_cmp = _pa_timeval_cmpPtr
      .asFunction<int Function(ffi.Pointer<timeval>, ffi.Pointer<timeval>)>();

  int pa_timeval_age(
    ffi.Pointer<timeval> tv,
  ) {
    return _pa_timeval_age(
      tv,
    );
  }

  late final _pa_timeval_agePtr =
      _lookup<ffi.NativeFunction<pa_usec_t Function(ffi.Pointer<timeval>)>>(
          'pa_timeval_age');
  late final _pa_timeval_age =
      _pa_timeval_agePtr.asFunction<int Function(ffi.Pointer<timeval>)>();

  ffi.Pointer<timeval> pa_timeval_add(
    ffi.Pointer<timeval> tv,
    int v,
  ) {
    return _pa_timeval_add(
      tv,
      v,
    );
  }

  late final _pa_timeval_addPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<timeval>, pa_usec_t)>>('pa_timeval_add');
  late final _pa_timeval_add = _pa_timeval_addPtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>, int)>();

  ffi.Pointer<timeval> pa_timeval_sub(
    ffi.Pointer<timeval> tv,
    int v,
  ) {
    return _pa_timeval_sub(
      tv,
      v,
    );
  }

  late final _pa_timeval_subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<timeval>, pa_usec_t)>>('pa_timeval_sub');
  late final _pa_timeval_sub = _pa_timeval_subPtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>, int)>();

  ffi.Pointer<timeval> pa_timeval_store(
    ffi.Pointer<timeval> tv,
    int v,
  ) {
    return _pa_timeval_store(
      tv,
      v,
    );
  }

  late final _pa_timeval_storePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<timeval> Function(
              ffi.Pointer<timeval>, pa_usec_t)>>('pa_timeval_store');
  late final _pa_timeval_store = _pa_timeval_storePtr
      .asFunction<ffi.Pointer<timeval> Function(ffi.Pointer<timeval>, int)>();

  int pa_timeval_load(
    ffi.Pointer<timeval> tv,
  ) {
    return _pa_timeval_load(
      tv,
    );
  }

  late final _pa_timeval_loadPtr =
      _lookup<ffi.NativeFunction<pa_usec_t Function(ffi.Pointer<timeval>)>>(
          'pa_timeval_load');
  late final _pa_timeval_load =
      _pa_timeval_loadPtr.asFunction<int Function(ffi.Pointer<timeval>)>();

  int pa_rtclock_now() {
    return _pa_rtclock_now();
  }

  late final _pa_rtclock_nowPtr =
      _lookup<ffi.NativeFunction<pa_usec_t Function()>>('pa_rtclock_now');
  late final _pa_rtclock_now = _pa_rtclock_nowPtr.asFunction<int Function()>();
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;

final class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Long;
typedef Dart__fd_mask = int;

final class timezone extends ffi.Struct {
  @ffi.Int()
  external int tz_minuteswest;

  @ffi.Int()
  external int tz_dsttime;
}

enum __itimer_which {
  ITIMER_REAL(0),
  ITIMER_VIRTUAL(1),
  ITIMER_PROF(2);

  final int value;
  const __itimer_which(this.value);

  static __itimer_which fromValue(int value) => switch (value) {
        0 => ITIMER_REAL,
        1 => ITIMER_VIRTUAL,
        2 => ITIMER_PROF,
        _ => throw ArgumentError("Unknown value for __itimer_which: $value"),
      };
}

final class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

typedef __itimer_which_t = ffi.Int;
typedef Dart__itimer_which_t = int;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class siginfo_t extends ffi.Struct {
  @ffi.Int()
  external int si_signo;

  @ffi.Int()
  external int si_errno;

  @ffi.Int()
  external int si_code;

  @ffi.Int()
  external int __pad0;

  external UnnamedUnion1 _sifields;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.Array.multi([28])
  external ffi.Array<ffi.Int> _pad;

  external UnnamedStruct2 _kill;

  external UnnamedStruct3 _timer;

  external UnnamedStruct4 _rt;

  external UnnamedStruct5 _sigchld;

  external UnnamedStruct6 _sigfault;

  external UnnamedStruct8 _sigpoll;

  external UnnamedStruct9 _sigsys;
}

final class UnnamedStruct2 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;
}

typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.Int()
  external int si_tid;

  @ffi.Int()
  external int si_overrun;

  external __sigval_t si_sigval;
}

typedef __sigval_t = sigval;

final class UnnamedStruct4 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  external __sigval_t si_sigval;
}

final class UnnamedStruct5 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  @ffi.Int()
  external int si_status;

  @__clock_t()
  external int si_utime;

  @__clock_t()
  external int si_stime;
}

typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;

final class UnnamedStruct6 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> si_addr;

  @ffi.Short()
  external int si_addr_lsb;

  external UnnamedUnion2 _bounds;
}

final class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct7 _addr_bnd;

  @__uint32_t()
  external int _pkey;
}

final class UnnamedStruct7 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _lower;

  external ffi.Pointer<ffi.Void> _upper;
}

typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;

final class UnnamedStruct8 extends ffi.Struct {
  @ffi.Long()
  external int si_band;

  @ffi.Int()
  external int si_fd;
}

final class UnnamedStruct9 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _call_addr;

  @ffi.Int()
  external int _syscall;

  @ffi.UnsignedInt()
  external int _arch;
}

final class sigevent extends ffi.Struct {
  external __sigval_t sigev_value;

  @ffi.Int()
  external int sigev_signo;

  @ffi.Int()
  external int sigev_notify;

  external UnnamedUnion3 _sigev_un;
}

final class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Int> _pad;

  @__pid_t()
  external int _tid;

  external UnnamedStruct10 _sigev_thread;
}

final class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(__sigval_t)>>
      _function;

  external ffi.Pointer<pthread_attr_t> _attribute;
}

final class sigaction extends ffi.Struct {
  external UnnamedUnion4 __sigaction_handler;

  external __sigset_t sa_mask;

  @ffi.Int()
  external int sa_flags;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> sa_restorer;
}

final class UnnamedUnion4 extends ffi.Union {
  external __sighandler_t sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>>
      sa_sigaction;
}

typedef __sighandler_t
    = ffi.Pointer<ffi.NativeFunction<__sighandler_tFunction>>;
typedef __sighandler_tFunction = ffi.Void Function(ffi.Int);
typedef Dart__sighandler_tFunction = void Function(int);

final class _fpx_sw_bytes extends ffi.Struct {
  @__uint32_t()
  external int magic1;

  @__uint32_t()
  external int extended_size;

  @__uint64_t()
  external int xstate_bv;

  @__uint32_t()
  external int xstate_size;

  @ffi.Array.multi([7])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint64_t = ffi.UnsignedLong;
typedef Dart__uint64_t = int;

final class _fpreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;
}

final class _fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

final class _xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

final class _fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;

final class sigcontext extends ffi.Struct {
  @__uint64_t()
  external int r8;

  @__uint64_t()
  external int r9;

  @__uint64_t()
  external int r10;

  @__uint64_t()
  external int r11;

  @__uint64_t()
  external int r12;

  @__uint64_t()
  external int r13;

  @__uint64_t()
  external int r14;

  @__uint64_t()
  external int r15;

  @__uint64_t()
  external int rdi;

  @__uint64_t()
  external int rsi;

  @__uint64_t()
  external int rbp;

  @__uint64_t()
  external int rbx;

  @__uint64_t()
  external int rdx;

  @__uint64_t()
  external int rax;

  @__uint64_t()
  external int rcx;

  @__uint64_t()
  external int rsp;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int eflags;

  @ffi.UnsignedShort()
  external int cs;

  @ffi.UnsignedShort()
  external int gs;

  @ffi.UnsignedShort()
  external int fs;

  @ffi.UnsignedShort()
  external int __pad0;

  @__uint64_t()
  external int err;

  @__uint64_t()
  external int trapno;

  @__uint64_t()
  external int oldmask;

  @__uint64_t()
  external int cr2;

  external UnnamedUnion5 unnamed;

  @ffi.Array.multi([8])
  external ffi.Array<__uint64_t> __reserved1;
}

final class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<_fpstate> fpstate;

  @__uint64_t()
  external int __fpstate_word;
}

final class _xsave_hdr extends ffi.Struct {
  @__uint64_t()
  external int xstate_bv;

  @ffi.Array.multi([2])
  external ffi.Array<__uint64_t> __glibc_reserved1;

  @ffi.Array.multi([5])
  external ffi.Array<__uint64_t> __glibc_reserved2;
}

final class _ymmh_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> ymmh_space;
}

final class _xstate extends ffi.Struct {
  external _fpstate fpstate;

  external _xsave_hdr xstate_hdr;

  external _ymmh_state ymmh;
}

final class stack_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_flags;

  @ffi.Size()
  external int ss_size;
}

final class _libc_fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> significand;

  @ffi.UnsignedShort()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.UnsignedShort> __glibc_reserved1;
}

final class _libc_xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

final class _libc_fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_libc_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_libc_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

final class mcontext_t extends ffi.Struct {
  @ffi.Array.multi([23])
  external ffi.Array<greg_t> gregs;

  external fpregset_t fpregs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedLongLong> __reserved1;
}

typedef greg_t = ffi.LongLong;
typedef Dartgreg_t = int;
typedef fpregset_t = ffi.Pointer<_libc_fpstate>;

final class ucontext_t extends ffi.Struct {
  @ffi.UnsignedLong()
  external int uc_flags;

  external ffi.Pointer<ucontext_t> uc_link;

  external stack_t uc_stack;

  external mcontext_t uc_mcontext;

  external sigset_t uc_sigmask;

  external _libc_fpstate __fpregs_mem;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedLongLong> __ssp;
}

typedef sigset_t = __sigset_t;

final class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int()
  external int ss_onstack;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;

enum pa_sample_format {
  PA_SAMPLE_U8(0),
  PA_SAMPLE_ALAW(1),
  PA_SAMPLE_ULAW(2),
  PA_SAMPLE_S16LE(3),
  PA_SAMPLE_S16BE(4),
  PA_SAMPLE_FLOAT32LE(5),
  PA_SAMPLE_FLOAT32BE(6),
  PA_SAMPLE_S32LE(7),
  PA_SAMPLE_S32BE(8),
  PA_SAMPLE_S24LE(9),
  PA_SAMPLE_S24BE(10),
  PA_SAMPLE_S24_32LE(11),
  PA_SAMPLE_S24_32BE(12),
  PA_SAMPLE_MAX(13),
  PA_SAMPLE_INVALID(-1);

  final int value;
  const pa_sample_format(this.value);

  static pa_sample_format fromValue(int value) => switch (value) {
        0 => PA_SAMPLE_U8,
        1 => PA_SAMPLE_ALAW,
        2 => PA_SAMPLE_ULAW,
        3 => PA_SAMPLE_S16LE,
        4 => PA_SAMPLE_S16BE,
        5 => PA_SAMPLE_FLOAT32LE,
        6 => PA_SAMPLE_FLOAT32BE,
        7 => PA_SAMPLE_S32LE,
        8 => PA_SAMPLE_S32BE,
        9 => PA_SAMPLE_S24LE,
        10 => PA_SAMPLE_S24BE,
        11 => PA_SAMPLE_S24_32LE,
        12 => PA_SAMPLE_S24_32BE,
        13 => PA_SAMPLE_MAX,
        -1 => PA_SAMPLE_INVALID,
        _ => throw ArgumentError("Unknown value for pa_sample_format: $value"),
      };
}

final class pa_sample_spec extends ffi.Struct {
  @ffi.Int()
  external int formatAsInt;

  pa_sample_format get format => pa_sample_format.fromValue(formatAsInt);

  @ffi.Uint32()
  external int rate;

  @ffi.Uint8()
  external int channels;
}

typedef pa_usec_t = ffi.Uint64;
typedef Dartpa_usec_t = int;

enum pa_context_state {
  PA_CONTEXT_UNCONNECTED(0),
  PA_CONTEXT_CONNECTING(1),
  PA_CONTEXT_AUTHORIZING(2),
  PA_CONTEXT_SETTING_NAME(3),
  PA_CONTEXT_READY(4),
  PA_CONTEXT_FAILED(5),
  PA_CONTEXT_TERMINATED(6);

  final int value;
  const pa_context_state(this.value);

  static pa_context_state fromValue(int value) => switch (value) {
        0 => PA_CONTEXT_UNCONNECTED,
        1 => PA_CONTEXT_CONNECTING,
        2 => PA_CONTEXT_AUTHORIZING,
        3 => PA_CONTEXT_SETTING_NAME,
        4 => PA_CONTEXT_READY,
        5 => PA_CONTEXT_FAILED,
        6 => PA_CONTEXT_TERMINATED,
        _ => throw ArgumentError("Unknown value for pa_context_state: $value"),
      };
}

enum pa_stream_state {
  PA_STREAM_UNCONNECTED(0),
  PA_STREAM_CREATING(1),
  PA_STREAM_READY(2),
  PA_STREAM_FAILED(3),
  PA_STREAM_TERMINATED(4);

  final int value;
  const pa_stream_state(this.value);

  static pa_stream_state fromValue(int value) => switch (value) {
        0 => PA_STREAM_UNCONNECTED,
        1 => PA_STREAM_CREATING,
        2 => PA_STREAM_READY,
        3 => PA_STREAM_FAILED,
        4 => PA_STREAM_TERMINATED,
        _ => throw ArgumentError("Unknown value for pa_stream_state: $value"),
      };
}

enum pa_operation_state {
  PA_OPERATION_RUNNING(0),
  PA_OPERATION_DONE(1),
  PA_OPERATION_CANCELLED(2);

  final int value;
  const pa_operation_state(this.value);

  static pa_operation_state fromValue(int value) => switch (value) {
        0 => PA_OPERATION_RUNNING,
        1 => PA_OPERATION_DONE,
        2 => PA_OPERATION_CANCELLED,
        _ =>
          throw ArgumentError("Unknown value for pa_operation_state: $value"),
      };
}

enum pa_context_flags {
  PA_CONTEXT_NOFLAGS(0),
  PA_CONTEXT_NOAUTOSPAWN(1),
  PA_CONTEXT_NOFAIL(2);

  final int value;
  const pa_context_flags(this.value);

  static pa_context_flags fromValue(int value) => switch (value) {
        0 => PA_CONTEXT_NOFLAGS,
        1 => PA_CONTEXT_NOAUTOSPAWN,
        2 => PA_CONTEXT_NOFAIL,
        _ => throw ArgumentError("Unknown value for pa_context_flags: $value"),
      };
}

enum pa_direction {
  PA_DIRECTION_OUTPUT(1),
  PA_DIRECTION_INPUT(2);

  final int value;
  const pa_direction(this.value);

  static pa_direction fromValue(int value) => switch (value) {
        1 => PA_DIRECTION_OUTPUT,
        2 => PA_DIRECTION_INPUT,
        _ => throw ArgumentError("Unknown value for pa_direction: $value"),
      };
}

enum pa_device_type {
  PA_DEVICE_TYPE_SINK(0),
  PA_DEVICE_TYPE_SOURCE(1);

  final int value;
  const pa_device_type(this.value);

  static pa_device_type fromValue(int value) => switch (value) {
        0 => PA_DEVICE_TYPE_SINK,
        1 => PA_DEVICE_TYPE_SOURCE,
        _ => throw ArgumentError("Unknown value for pa_device_type: $value"),
      };
}

enum pa_stream_direction {
  PA_STREAM_NODIRECTION(0),
  PA_STREAM_PLAYBACK(1),
  PA_STREAM_RECORD(2),
  PA_STREAM_UPLOAD(3);

  final int value;
  const pa_stream_direction(this.value);

  static pa_stream_direction fromValue(int value) => switch (value) {
        0 => PA_STREAM_NODIRECTION,
        1 => PA_STREAM_PLAYBACK,
        2 => PA_STREAM_RECORD,
        3 => PA_STREAM_UPLOAD,
        _ =>
          throw ArgumentError("Unknown value for pa_stream_direction: $value"),
      };
}

enum pa_stream_flags {
  PA_STREAM_NOFLAGS(0),
  PA_STREAM_START_CORKED(1),
  PA_STREAM_INTERPOLATE_TIMING(2),
  PA_STREAM_NOT_MONOTONIC(4),
  PA_STREAM_AUTO_TIMING_UPDATE(8),
  PA_STREAM_NO_REMAP_CHANNELS(16),
  PA_STREAM_NO_REMIX_CHANNELS(32),
  PA_STREAM_FIX_FORMAT(64),
  PA_STREAM_FIX_RATE(128),
  PA_STREAM_FIX_CHANNELS(256),
  PA_STREAM_DONT_MOVE(512),
  PA_STREAM_VARIABLE_RATE(1024),
  PA_STREAM_PEAK_DETECT(2048),
  PA_STREAM_START_MUTED(4096),
  PA_STREAM_ADJUST_LATENCY(8192),
  PA_STREAM_EARLY_REQUESTS(16384),
  PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND(32768),
  PA_STREAM_START_UNMUTED(65536),
  PA_STREAM_FAIL_ON_SUSPEND(131072),
  PA_STREAM_RELATIVE_VOLUME(262144),
  PA_STREAM_PASSTHROUGH(524288);

  final int value;
  const pa_stream_flags(this.value);

  static pa_stream_flags fromValue(int value) => switch (value) {
        0 => PA_STREAM_NOFLAGS,
        1 => PA_STREAM_START_CORKED,
        2 => PA_STREAM_INTERPOLATE_TIMING,
        4 => PA_STREAM_NOT_MONOTONIC,
        8 => PA_STREAM_AUTO_TIMING_UPDATE,
        16 => PA_STREAM_NO_REMAP_CHANNELS,
        32 => PA_STREAM_NO_REMIX_CHANNELS,
        64 => PA_STREAM_FIX_FORMAT,
        128 => PA_STREAM_FIX_RATE,
        256 => PA_STREAM_FIX_CHANNELS,
        512 => PA_STREAM_DONT_MOVE,
        1024 => PA_STREAM_VARIABLE_RATE,
        2048 => PA_STREAM_PEAK_DETECT,
        4096 => PA_STREAM_START_MUTED,
        8192 => PA_STREAM_ADJUST_LATENCY,
        16384 => PA_STREAM_EARLY_REQUESTS,
        32768 => PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND,
        65536 => PA_STREAM_START_UNMUTED,
        131072 => PA_STREAM_FAIL_ON_SUSPEND,
        262144 => PA_STREAM_RELATIVE_VOLUME,
        524288 => PA_STREAM_PASSTHROUGH,
        _ => throw ArgumentError("Unknown value for pa_stream_flags: $value"),
      };
}

final class pa_buffer_attr extends ffi.Struct {
  @ffi.Uint32()
  external int maxlength;

  @ffi.Uint32()
  external int tlength;

  @ffi.Uint32()
  external int prebuf;

  @ffi.Uint32()
  external int minreq;

  @ffi.Uint32()
  external int fragsize;
}

enum pa_error_code {
  PA_OK(0),
  PA_ERR_ACCESS(1),
  PA_ERR_COMMAND(2),
  PA_ERR_INVALID(3),
  PA_ERR_EXIST(4),
  PA_ERR_NOENTITY(5),
  PA_ERR_CONNECTIONREFUSED(6),
  PA_ERR_PROTOCOL(7),
  PA_ERR_TIMEOUT(8),
  PA_ERR_AUTHKEY(9),
  PA_ERR_INTERNAL(10),
  PA_ERR_CONNECTIONTERMINATED(11),
  PA_ERR_KILLED(12),
  PA_ERR_INVALIDSERVER(13),
  PA_ERR_MODINITFAILED(14),
  PA_ERR_BADSTATE(15),
  PA_ERR_NODATA(16),
  PA_ERR_VERSION(17),
  PA_ERR_TOOLARGE(18),
  PA_ERR_NOTSUPPORTED(19),
  PA_ERR_UNKNOWN(20),
  PA_ERR_NOEXTENSION(21),
  PA_ERR_OBSOLETE(22),
  PA_ERR_NOTIMPLEMENTED(23),
  PA_ERR_FORKED(24),
  PA_ERR_IO(25),
  PA_ERR_BUSY(26),
  PA_ERR_MAX(27);

  final int value;
  const pa_error_code(this.value);

  static pa_error_code fromValue(int value) => switch (value) {
        0 => PA_OK,
        1 => PA_ERR_ACCESS,
        2 => PA_ERR_COMMAND,
        3 => PA_ERR_INVALID,
        4 => PA_ERR_EXIST,
        5 => PA_ERR_NOENTITY,
        6 => PA_ERR_CONNECTIONREFUSED,
        7 => PA_ERR_PROTOCOL,
        8 => PA_ERR_TIMEOUT,
        9 => PA_ERR_AUTHKEY,
        10 => PA_ERR_INTERNAL,
        11 => PA_ERR_CONNECTIONTERMINATED,
        12 => PA_ERR_KILLED,
        13 => PA_ERR_INVALIDSERVER,
        14 => PA_ERR_MODINITFAILED,
        15 => PA_ERR_BADSTATE,
        16 => PA_ERR_NODATA,
        17 => PA_ERR_VERSION,
        18 => PA_ERR_TOOLARGE,
        19 => PA_ERR_NOTSUPPORTED,
        20 => PA_ERR_UNKNOWN,
        21 => PA_ERR_NOEXTENSION,
        22 => PA_ERR_OBSOLETE,
        23 => PA_ERR_NOTIMPLEMENTED,
        24 => PA_ERR_FORKED,
        25 => PA_ERR_IO,
        26 => PA_ERR_BUSY,
        27 => PA_ERR_MAX,
        _ => throw ArgumentError("Unknown value for pa_error_code: $value"),
      };
}

enum pa_subscription_mask {
  PA_SUBSCRIPTION_MASK_NULL(0),
  PA_SUBSCRIPTION_MASK_SINK(1),
  PA_SUBSCRIPTION_MASK_SOURCE(2),
  PA_SUBSCRIPTION_MASK_SINK_INPUT(4),
  PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT(8),
  PA_SUBSCRIPTION_MASK_MODULE(16),
  PA_SUBSCRIPTION_MASK_CLIENT(32),
  PA_SUBSCRIPTION_MASK_SAMPLE_CACHE(64),
  PA_SUBSCRIPTION_MASK_SERVER(128),
  PA_SUBSCRIPTION_MASK_AUTOLOAD(256),
  PA_SUBSCRIPTION_MASK_CARD(512),
  PA_SUBSCRIPTION_MASK_ALL(767);

  final int value;
  const pa_subscription_mask(this.value);

  static pa_subscription_mask fromValue(int value) => switch (value) {
        0 => PA_SUBSCRIPTION_MASK_NULL,
        1 => PA_SUBSCRIPTION_MASK_SINK,
        2 => PA_SUBSCRIPTION_MASK_SOURCE,
        4 => PA_SUBSCRIPTION_MASK_SINK_INPUT,
        8 => PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT,
        16 => PA_SUBSCRIPTION_MASK_MODULE,
        32 => PA_SUBSCRIPTION_MASK_CLIENT,
        64 => PA_SUBSCRIPTION_MASK_SAMPLE_CACHE,
        128 => PA_SUBSCRIPTION_MASK_SERVER,
        256 => PA_SUBSCRIPTION_MASK_AUTOLOAD,
        512 => PA_SUBSCRIPTION_MASK_CARD,
        767 => PA_SUBSCRIPTION_MASK_ALL,
        _ =>
          throw ArgumentError("Unknown value for pa_subscription_mask: $value"),
      };
}

enum pa_subscription_event_type {
  PA_SUBSCRIPTION_EVENT_SINK(0),
  PA_SUBSCRIPTION_EVENT_SOURCE(1),
  PA_SUBSCRIPTION_EVENT_SINK_INPUT(2),
  PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT(3),
  PA_SUBSCRIPTION_EVENT_MODULE(4),
  PA_SUBSCRIPTION_EVENT_CLIENT(5),
  PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE(6),
  PA_SUBSCRIPTION_EVENT_SERVER(7),
  PA_SUBSCRIPTION_EVENT_AUTOLOAD(8),
  PA_SUBSCRIPTION_EVENT_CARD(9),
  PA_SUBSCRIPTION_EVENT_FACILITY_MASK(15),
  PA_SUBSCRIPTION_EVENT_CHANGE(16),
  PA_SUBSCRIPTION_EVENT_REMOVE(32),
  PA_SUBSCRIPTION_EVENT_TYPE_MASK(48);

  static const PA_SUBSCRIPTION_EVENT_NEW = PA_SUBSCRIPTION_EVENT_SINK;

  final int value;
  const pa_subscription_event_type(this.value);

  static pa_subscription_event_type fromValue(int value) => switch (value) {
        0 => PA_SUBSCRIPTION_EVENT_SINK,
        1 => PA_SUBSCRIPTION_EVENT_SOURCE,
        2 => PA_SUBSCRIPTION_EVENT_SINK_INPUT,
        3 => PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT,
        4 => PA_SUBSCRIPTION_EVENT_MODULE,
        5 => PA_SUBSCRIPTION_EVENT_CLIENT,
        6 => PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE,
        7 => PA_SUBSCRIPTION_EVENT_SERVER,
        8 => PA_SUBSCRIPTION_EVENT_AUTOLOAD,
        9 => PA_SUBSCRIPTION_EVENT_CARD,
        15 => PA_SUBSCRIPTION_EVENT_FACILITY_MASK,
        16 => PA_SUBSCRIPTION_EVENT_CHANGE,
        32 => PA_SUBSCRIPTION_EVENT_REMOVE,
        48 => PA_SUBSCRIPTION_EVENT_TYPE_MASK,
        _ => throw ArgumentError(
            "Unknown value for pa_subscription_event_type: $value"),
      };

  @override
  String toString() {
    if (this == PA_SUBSCRIPTION_EVENT_SINK)
      return "pa_subscription_event_type.PA_SUBSCRIPTION_EVENT_SINK, pa_subscription_event_type.PA_SUBSCRIPTION_EVENT_NEW";
    return super.toString();
  }
}

final class pa_timing_info extends ffi.Struct {
  external timeval timestamp;

  @ffi.Int()
  external int synchronized_clocks;

  @pa_usec_t()
  external int sink_usec;

  @pa_usec_t()
  external int source_usec;

  @pa_usec_t()
  external int transport_usec;

  @ffi.Int()
  external int playing;

  @ffi.Int()
  external int write_index_corrupt;

  @ffi.Int64()
  external int write_index;

  @ffi.Int()
  external int read_index_corrupt;

  @ffi.Int64()
  external int read_index;

  @pa_usec_t()
  external int configured_sink_usec;

  @pa_usec_t()
  external int configured_source_usec;

  @ffi.Int64()
  external int since_underrun;
}

final class pa_spawn_api extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> prefork;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> postfork;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> atfork;
}

enum pa_seek_mode {
  PA_SEEK_RELATIVE(0),
  PA_SEEK_ABSOLUTE(1),
  PA_SEEK_RELATIVE_ON_READ(2),
  PA_SEEK_RELATIVE_END(3);

  final int value;
  const pa_seek_mode(this.value);

  static pa_seek_mode fromValue(int value) => switch (value) {
        0 => PA_SEEK_RELATIVE,
        1 => PA_SEEK_ABSOLUTE,
        2 => PA_SEEK_RELATIVE_ON_READ,
        3 => PA_SEEK_RELATIVE_END,
        _ => throw ArgumentError("Unknown value for pa_seek_mode: $value"),
      };
}

enum pa_sink_flags {
  PA_SINK_NOFLAGS(0),
  PA_SINK_HW_VOLUME_CTRL(1),
  PA_SINK_LATENCY(2),
  PA_SINK_HARDWARE(4),
  PA_SINK_NETWORK(8),
  PA_SINK_HW_MUTE_CTRL(16),
  PA_SINK_DECIBEL_VOLUME(32),
  PA_SINK_FLAT_VOLUME(64),
  PA_SINK_DYNAMIC_LATENCY(128),
  PA_SINK_SET_FORMATS(256);

  final int value;
  const pa_sink_flags(this.value);

  static pa_sink_flags fromValue(int value) => switch (value) {
        0 => PA_SINK_NOFLAGS,
        1 => PA_SINK_HW_VOLUME_CTRL,
        2 => PA_SINK_LATENCY,
        4 => PA_SINK_HARDWARE,
        8 => PA_SINK_NETWORK,
        16 => PA_SINK_HW_MUTE_CTRL,
        32 => PA_SINK_DECIBEL_VOLUME,
        64 => PA_SINK_FLAT_VOLUME,
        128 => PA_SINK_DYNAMIC_LATENCY,
        256 => PA_SINK_SET_FORMATS,
        _ => throw ArgumentError("Unknown value for pa_sink_flags: $value"),
      };
}

enum pa_sink_state {
  PA_SINK_INVALID_STATE(-1),
  PA_SINK_RUNNING(0),
  PA_SINK_IDLE(1),
  PA_SINK_SUSPENDED(2),
  PA_SINK_INIT(-2),
  PA_SINK_UNLINKED(-3);

  final int value;
  const pa_sink_state(this.value);

  static pa_sink_state fromValue(int value) => switch (value) {
        -1 => PA_SINK_INVALID_STATE,
        0 => PA_SINK_RUNNING,
        1 => PA_SINK_IDLE,
        2 => PA_SINK_SUSPENDED,
        -2 => PA_SINK_INIT,
        -3 => PA_SINK_UNLINKED,
        _ => throw ArgumentError("Unknown value for pa_sink_state: $value"),
      };
}

enum pa_source_flags {
  PA_SOURCE_NOFLAGS(0),
  PA_SOURCE_HW_VOLUME_CTRL(1),
  PA_SOURCE_LATENCY(2),
  PA_SOURCE_HARDWARE(4),
  PA_SOURCE_NETWORK(8),
  PA_SOURCE_HW_MUTE_CTRL(16),
  PA_SOURCE_DECIBEL_VOLUME(32),
  PA_SOURCE_DYNAMIC_LATENCY(64),
  PA_SOURCE_FLAT_VOLUME(128);

  final int value;
  const pa_source_flags(this.value);

  static pa_source_flags fromValue(int value) => switch (value) {
        0 => PA_SOURCE_NOFLAGS,
        1 => PA_SOURCE_HW_VOLUME_CTRL,
        2 => PA_SOURCE_LATENCY,
        4 => PA_SOURCE_HARDWARE,
        8 => PA_SOURCE_NETWORK,
        16 => PA_SOURCE_HW_MUTE_CTRL,
        32 => PA_SOURCE_DECIBEL_VOLUME,
        64 => PA_SOURCE_DYNAMIC_LATENCY,
        128 => PA_SOURCE_FLAT_VOLUME,
        _ => throw ArgumentError("Unknown value for pa_source_flags: $value"),
      };
}

enum pa_source_state {
  PA_SOURCE_INVALID_STATE(-1),
  PA_SOURCE_RUNNING(0),
  PA_SOURCE_IDLE(1),
  PA_SOURCE_SUSPENDED(2),
  PA_SOURCE_INIT(-2),
  PA_SOURCE_UNLINKED(-3);

  final int value;
  const pa_source_state(this.value);

  static pa_source_state fromValue(int value) => switch (value) {
        -1 => PA_SOURCE_INVALID_STATE,
        0 => PA_SOURCE_RUNNING,
        1 => PA_SOURCE_IDLE,
        2 => PA_SOURCE_SUSPENDED,
        -2 => PA_SOURCE_INIT,
        -3 => PA_SOURCE_UNLINKED,
        _ => throw ArgumentError("Unknown value for pa_source_state: $value"),
      };
}

enum pa_port_available {
  PA_PORT_AVAILABLE_UNKNOWN(0),
  PA_PORT_AVAILABLE_NO(1),
  PA_PORT_AVAILABLE_YES(2);

  final int value;
  const pa_port_available(this.value);

  static pa_port_available fromValue(int value) => switch (value) {
        0 => PA_PORT_AVAILABLE_UNKNOWN,
        1 => PA_PORT_AVAILABLE_NO,
        2 => PA_PORT_AVAILABLE_YES,
        _ => throw ArgumentError("Unknown value for pa_port_available: $value"),
      };
}

enum pa_device_port_type {
  PA_DEVICE_PORT_TYPE_UNKNOWN(0),
  PA_DEVICE_PORT_TYPE_AUX(1),
  PA_DEVICE_PORT_TYPE_SPEAKER(2),
  PA_DEVICE_PORT_TYPE_HEADPHONES(3),
  PA_DEVICE_PORT_TYPE_LINE(4),
  PA_DEVICE_PORT_TYPE_MIC(5),
  PA_DEVICE_PORT_TYPE_HEADSET(6),
  PA_DEVICE_PORT_TYPE_HANDSET(7),
  PA_DEVICE_PORT_TYPE_EARPIECE(8),
  PA_DEVICE_PORT_TYPE_SPDIF(9),
  PA_DEVICE_PORT_TYPE_HDMI(10),
  PA_DEVICE_PORT_TYPE_TV(11),
  PA_DEVICE_PORT_TYPE_RADIO(12),
  PA_DEVICE_PORT_TYPE_VIDEO(13),
  PA_DEVICE_PORT_TYPE_USB(14),
  PA_DEVICE_PORT_TYPE_BLUETOOTH(15),
  PA_DEVICE_PORT_TYPE_PORTABLE(16),
  PA_DEVICE_PORT_TYPE_HANDSFREE(17),
  PA_DEVICE_PORT_TYPE_CAR(18),
  PA_DEVICE_PORT_TYPE_HIFI(19),
  PA_DEVICE_PORT_TYPE_PHONE(20),
  PA_DEVICE_PORT_TYPE_NETWORK(21),
  PA_DEVICE_PORT_TYPE_ANALOG(22);

  final int value;
  const pa_device_port_type(this.value);

  static pa_device_port_type fromValue(int value) => switch (value) {
        0 => PA_DEVICE_PORT_TYPE_UNKNOWN,
        1 => PA_DEVICE_PORT_TYPE_AUX,
        2 => PA_DEVICE_PORT_TYPE_SPEAKER,
        3 => PA_DEVICE_PORT_TYPE_HEADPHONES,
        4 => PA_DEVICE_PORT_TYPE_LINE,
        5 => PA_DEVICE_PORT_TYPE_MIC,
        6 => PA_DEVICE_PORT_TYPE_HEADSET,
        7 => PA_DEVICE_PORT_TYPE_HANDSET,
        8 => PA_DEVICE_PORT_TYPE_EARPIECE,
        9 => PA_DEVICE_PORT_TYPE_SPDIF,
        10 => PA_DEVICE_PORT_TYPE_HDMI,
        11 => PA_DEVICE_PORT_TYPE_TV,
        12 => PA_DEVICE_PORT_TYPE_RADIO,
        13 => PA_DEVICE_PORT_TYPE_VIDEO,
        14 => PA_DEVICE_PORT_TYPE_USB,
        15 => PA_DEVICE_PORT_TYPE_BLUETOOTH,
        16 => PA_DEVICE_PORT_TYPE_PORTABLE,
        17 => PA_DEVICE_PORT_TYPE_HANDSFREE,
        18 => PA_DEVICE_PORT_TYPE_CAR,
        19 => PA_DEVICE_PORT_TYPE_HIFI,
        20 => PA_DEVICE_PORT_TYPE_PHONE,
        21 => PA_DEVICE_PORT_TYPE_NETWORK,
        22 => PA_DEVICE_PORT_TYPE_ANALOG,
        _ =>
          throw ArgumentError("Unknown value for pa_device_port_type: $value"),
      };
}

final class pa_mainloop_api extends ffi.Struct {
  external ffi.Pointer<ffi.Void> userdata;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pa_io_event> Function(
              ffi.Pointer<pa_mainloop_api> a,
              ffi.Int fd,
              ffi.UnsignedInt events,
              pa_io_event_cb_t cb,
              ffi.Pointer<ffi.Void> userdata)>> io_new;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_io_event> e, ffi.UnsignedInt events)>> io_enable;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_io_event> e)>>
      io_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<pa_io_event> e, pa_io_event_destroy_cb_t cb)>>
      io_set_destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pa_time_event> Function(
              ffi.Pointer<pa_mainloop_api> a,
              ffi.Pointer<timeval> tv,
              pa_time_event_cb_t cb,
              ffi.Pointer<ffi.Void> userdata)>> time_new;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<pa_time_event> e, ffi.Pointer<timeval> tv)>>
      time_restart;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_time_event> e)>>
      time_free;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<pa_time_event> e, pa_time_event_destroy_cb_t cb)>>
      time_set_destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<pa_defer_event> Function(
              ffi.Pointer<pa_mainloop_api> a,
              pa_defer_event_cb_t cb,
              ffi.Pointer<ffi.Void> userdata)>> defer_new;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<pa_defer_event> e, ffi.Int b)>>
      defer_enable;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pa_defer_event> e)>>
      defer_free;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pa_defer_event> e,
              pa_defer_event_destroy_cb_t cb)>> defer_set_destroy;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pa_mainloop_api> a, ffi.Int retval)>> quit;
}

final class pa_io_event extends ffi.Opaque {}

enum pa_io_event_flags {
  PA_IO_EVENT_NULL(0),
  PA_IO_EVENT_INPUT(1),
  PA_IO_EVENT_OUTPUT(2),
  PA_IO_EVENT_HANGUP(4),
  PA_IO_EVENT_ERROR(8);

  final int value;
  const pa_io_event_flags(this.value);

  static pa_io_event_flags fromValue(int value) => switch (value) {
        0 => PA_IO_EVENT_NULL,
        1 => PA_IO_EVENT_INPUT,
        2 => PA_IO_EVENT_OUTPUT,
        4 => PA_IO_EVENT_HANGUP,
        8 => PA_IO_EVENT_ERROR,
        _ => throw ArgumentError("Unknown value for pa_io_event_flags: $value"),
      };
}

typedef pa_io_event_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_io_event_cb_tFunction>>;
typedef pa_io_event_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> ea,
    ffi.Pointer<pa_io_event> e,
    ffi.Int fd,
    ffi.UnsignedInt events,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_io_event_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> ea,
    ffi.Pointer<pa_io_event> e,
    int fd,
    pa_io_event_flags events,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_io_event_destroy_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_io_event_destroy_cb_tFunction>>;
typedef pa_io_event_destroy_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_io_event> e,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_io_event_destroy_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_io_event> e,
    ffi.Pointer<ffi.Void> userdata);

final class pa_time_event extends ffi.Opaque {}

typedef pa_time_event_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_time_event_cb_tFunction>>;
typedef pa_time_event_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_time_event> e,
    ffi.Pointer<timeval> tv,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_time_event_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_time_event> e,
    ffi.Pointer<timeval> tv,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_time_event_destroy_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_time_event_destroy_cb_tFunction>>;
typedef pa_time_event_destroy_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_time_event> e,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_time_event_destroy_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_time_event> e,
    ffi.Pointer<ffi.Void> userdata);

final class pa_defer_event extends ffi.Opaque {}

typedef pa_defer_event_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_defer_event_cb_tFunction>>;
typedef pa_defer_event_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_defer_event> e,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_defer_event_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_defer_event> e,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_defer_event_destroy_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_defer_event_destroy_cb_tFunction>>;
typedef pa_defer_event_destroy_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_defer_event> e,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_defer_event_destroy_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> a,
    ffi.Pointer<pa_defer_event> e,
    ffi.Pointer<ffi.Void> userdata);

final class pa_proplist extends ffi.Opaque {}

enum pa_update_mode {
  PA_UPDATE_SET(0),
  PA_UPDATE_MERGE(1),
  PA_UPDATE_REPLACE(2);

  final int value;
  const pa_update_mode(this.value);

  static pa_update_mode fromValue(int value) => switch (value) {
        0 => PA_UPDATE_SET,
        1 => PA_UPDATE_MERGE,
        2 => PA_UPDATE_REPLACE,
        _ => throw ArgumentError("Unknown value for pa_update_mode: $value"),
      };
}

enum pa_channel_position {
  PA_CHANNEL_POSITION_INVALID(-1),
  PA_CHANNEL_POSITION_MONO(0),
  PA_CHANNEL_POSITION_FRONT_LEFT(1),
  PA_CHANNEL_POSITION_FRONT_RIGHT(2),
  PA_CHANNEL_POSITION_FRONT_CENTER(3),
  PA_CHANNEL_POSITION_REAR_CENTER(4),
  PA_CHANNEL_POSITION_REAR_LEFT(5),
  PA_CHANNEL_POSITION_REAR_RIGHT(6),
  PA_CHANNEL_POSITION_LFE(7),
  PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER(8),
  PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER(9),
  PA_CHANNEL_POSITION_SIDE_LEFT(10),
  PA_CHANNEL_POSITION_SIDE_RIGHT(11),
  PA_CHANNEL_POSITION_AUX0(12),
  PA_CHANNEL_POSITION_AUX1(13),
  PA_CHANNEL_POSITION_AUX2(14),
  PA_CHANNEL_POSITION_AUX3(15),
  PA_CHANNEL_POSITION_AUX4(16),
  PA_CHANNEL_POSITION_AUX5(17),
  PA_CHANNEL_POSITION_AUX6(18),
  PA_CHANNEL_POSITION_AUX7(19),
  PA_CHANNEL_POSITION_AUX8(20),
  PA_CHANNEL_POSITION_AUX9(21),
  PA_CHANNEL_POSITION_AUX10(22),
  PA_CHANNEL_POSITION_AUX11(23),
  PA_CHANNEL_POSITION_AUX12(24),
  PA_CHANNEL_POSITION_AUX13(25),
  PA_CHANNEL_POSITION_AUX14(26),
  PA_CHANNEL_POSITION_AUX15(27),
  PA_CHANNEL_POSITION_AUX16(28),
  PA_CHANNEL_POSITION_AUX17(29),
  PA_CHANNEL_POSITION_AUX18(30),
  PA_CHANNEL_POSITION_AUX19(31),
  PA_CHANNEL_POSITION_AUX20(32),
  PA_CHANNEL_POSITION_AUX21(33),
  PA_CHANNEL_POSITION_AUX22(34),
  PA_CHANNEL_POSITION_AUX23(35),
  PA_CHANNEL_POSITION_AUX24(36),
  PA_CHANNEL_POSITION_AUX25(37),
  PA_CHANNEL_POSITION_AUX26(38),
  PA_CHANNEL_POSITION_AUX27(39),
  PA_CHANNEL_POSITION_AUX28(40),
  PA_CHANNEL_POSITION_AUX29(41),
  PA_CHANNEL_POSITION_AUX30(42),
  PA_CHANNEL_POSITION_AUX31(43),
  PA_CHANNEL_POSITION_TOP_CENTER(44),
  PA_CHANNEL_POSITION_TOP_FRONT_LEFT(45),
  PA_CHANNEL_POSITION_TOP_FRONT_RIGHT(46),
  PA_CHANNEL_POSITION_TOP_FRONT_CENTER(47),
  PA_CHANNEL_POSITION_TOP_REAR_LEFT(48),
  PA_CHANNEL_POSITION_TOP_REAR_RIGHT(49),
  PA_CHANNEL_POSITION_TOP_REAR_CENTER(50),
  PA_CHANNEL_POSITION_MAX(51);

  static const PA_CHANNEL_POSITION_LEFT = PA_CHANNEL_POSITION_FRONT_LEFT;
  static const PA_CHANNEL_POSITION_RIGHT = PA_CHANNEL_POSITION_FRONT_RIGHT;
  static const PA_CHANNEL_POSITION_CENTER = PA_CHANNEL_POSITION_FRONT_CENTER;
  static const PA_CHANNEL_POSITION_SUBWOOFER = PA_CHANNEL_POSITION_LFE;

  final int value;
  const pa_channel_position(this.value);

  static pa_channel_position fromValue(int value) => switch (value) {
        -1 => PA_CHANNEL_POSITION_INVALID,
        0 => PA_CHANNEL_POSITION_MONO,
        1 => PA_CHANNEL_POSITION_FRONT_LEFT,
        2 => PA_CHANNEL_POSITION_FRONT_RIGHT,
        3 => PA_CHANNEL_POSITION_FRONT_CENTER,
        4 => PA_CHANNEL_POSITION_REAR_CENTER,
        5 => PA_CHANNEL_POSITION_REAR_LEFT,
        6 => PA_CHANNEL_POSITION_REAR_RIGHT,
        7 => PA_CHANNEL_POSITION_LFE,
        8 => PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER,
        9 => PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER,
        10 => PA_CHANNEL_POSITION_SIDE_LEFT,
        11 => PA_CHANNEL_POSITION_SIDE_RIGHT,
        12 => PA_CHANNEL_POSITION_AUX0,
        13 => PA_CHANNEL_POSITION_AUX1,
        14 => PA_CHANNEL_POSITION_AUX2,
        15 => PA_CHANNEL_POSITION_AUX3,
        16 => PA_CHANNEL_POSITION_AUX4,
        17 => PA_CHANNEL_POSITION_AUX5,
        18 => PA_CHANNEL_POSITION_AUX6,
        19 => PA_CHANNEL_POSITION_AUX7,
        20 => PA_CHANNEL_POSITION_AUX8,
        21 => PA_CHANNEL_POSITION_AUX9,
        22 => PA_CHANNEL_POSITION_AUX10,
        23 => PA_CHANNEL_POSITION_AUX11,
        24 => PA_CHANNEL_POSITION_AUX12,
        25 => PA_CHANNEL_POSITION_AUX13,
        26 => PA_CHANNEL_POSITION_AUX14,
        27 => PA_CHANNEL_POSITION_AUX15,
        28 => PA_CHANNEL_POSITION_AUX16,
        29 => PA_CHANNEL_POSITION_AUX17,
        30 => PA_CHANNEL_POSITION_AUX18,
        31 => PA_CHANNEL_POSITION_AUX19,
        32 => PA_CHANNEL_POSITION_AUX20,
        33 => PA_CHANNEL_POSITION_AUX21,
        34 => PA_CHANNEL_POSITION_AUX22,
        35 => PA_CHANNEL_POSITION_AUX23,
        36 => PA_CHANNEL_POSITION_AUX24,
        37 => PA_CHANNEL_POSITION_AUX25,
        38 => PA_CHANNEL_POSITION_AUX26,
        39 => PA_CHANNEL_POSITION_AUX27,
        40 => PA_CHANNEL_POSITION_AUX28,
        41 => PA_CHANNEL_POSITION_AUX29,
        42 => PA_CHANNEL_POSITION_AUX30,
        43 => PA_CHANNEL_POSITION_AUX31,
        44 => PA_CHANNEL_POSITION_TOP_CENTER,
        45 => PA_CHANNEL_POSITION_TOP_FRONT_LEFT,
        46 => PA_CHANNEL_POSITION_TOP_FRONT_RIGHT,
        47 => PA_CHANNEL_POSITION_TOP_FRONT_CENTER,
        48 => PA_CHANNEL_POSITION_TOP_REAR_LEFT,
        49 => PA_CHANNEL_POSITION_TOP_REAR_RIGHT,
        50 => PA_CHANNEL_POSITION_TOP_REAR_CENTER,
        51 => PA_CHANNEL_POSITION_MAX,
        _ =>
          throw ArgumentError("Unknown value for pa_channel_position: $value"),
      };

  @override
  String toString() {
    if (this == PA_CHANNEL_POSITION_FRONT_LEFT)
      return "pa_channel_position.PA_CHANNEL_POSITION_FRONT_LEFT, pa_channel_position.PA_CHANNEL_POSITION_LEFT";
    if (this == PA_CHANNEL_POSITION_FRONT_RIGHT)
      return "pa_channel_position.PA_CHANNEL_POSITION_FRONT_RIGHT, pa_channel_position.PA_CHANNEL_POSITION_RIGHT";
    if (this == PA_CHANNEL_POSITION_FRONT_CENTER)
      return "pa_channel_position.PA_CHANNEL_POSITION_FRONT_CENTER, pa_channel_position.PA_CHANNEL_POSITION_CENTER";
    if (this == PA_CHANNEL_POSITION_LFE)
      return "pa_channel_position.PA_CHANNEL_POSITION_LFE, pa_channel_position.PA_CHANNEL_POSITION_SUBWOOFER";
    return super.toString();
  }
}

enum pa_channel_map_def {
  PA_CHANNEL_MAP_AIFF(0),
  PA_CHANNEL_MAP_ALSA(1),
  PA_CHANNEL_MAP_AUX(2),
  PA_CHANNEL_MAP_WAVEEX(3),
  PA_CHANNEL_MAP_OSS(4),
  PA_CHANNEL_MAP_DEF_MAX(5);

  static const PA_CHANNEL_MAP_DEFAULT = PA_CHANNEL_MAP_AIFF;

  final int value;
  const pa_channel_map_def(this.value);

  static pa_channel_map_def fromValue(int value) => switch (value) {
        0 => PA_CHANNEL_MAP_AIFF,
        1 => PA_CHANNEL_MAP_ALSA,
        2 => PA_CHANNEL_MAP_AUX,
        3 => PA_CHANNEL_MAP_WAVEEX,
        4 => PA_CHANNEL_MAP_OSS,
        5 => PA_CHANNEL_MAP_DEF_MAX,
        _ =>
          throw ArgumentError("Unknown value for pa_channel_map_def: $value"),
      };

  @override
  String toString() {
    if (this == PA_CHANNEL_MAP_AIFF)
      return "pa_channel_map_def.PA_CHANNEL_MAP_AIFF, pa_channel_map_def.PA_CHANNEL_MAP_DEFAULT";
    return super.toString();
  }
}

final class pa_channel_map extends ffi.Struct {
  @ffi.Uint8()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int> map;
}

typedef pa_channel_position_mask_t = ffi.Uint64;
typedef Dartpa_channel_position_mask_t = int;

enum pa_encoding {
  PA_ENCODING_ANY(0),
  PA_ENCODING_PCM(1),
  PA_ENCODING_AC3_IEC61937(2),
  PA_ENCODING_EAC3_IEC61937(3),
  PA_ENCODING_MPEG_IEC61937(4),
  PA_ENCODING_DTS_IEC61937(5),
  PA_ENCODING_MPEG2_AAC_IEC61937(6),
  PA_ENCODING_TRUEHD_IEC61937(7),
  PA_ENCODING_DTSHD_IEC61937(8),
  PA_ENCODING_MAX(9),
  PA_ENCODING_INVALID(-1);

  final int value;
  const pa_encoding(this.value);

  static pa_encoding fromValue(int value) => switch (value) {
        0 => PA_ENCODING_ANY,
        1 => PA_ENCODING_PCM,
        2 => PA_ENCODING_AC3_IEC61937,
        3 => PA_ENCODING_EAC3_IEC61937,
        4 => PA_ENCODING_MPEG_IEC61937,
        5 => PA_ENCODING_DTS_IEC61937,
        6 => PA_ENCODING_MPEG2_AAC_IEC61937,
        7 => PA_ENCODING_TRUEHD_IEC61937,
        8 => PA_ENCODING_DTSHD_IEC61937,
        9 => PA_ENCODING_MAX,
        -1 => PA_ENCODING_INVALID,
        _ => throw ArgumentError("Unknown value for pa_encoding: $value"),
      };
}

final class pa_format_info extends ffi.Struct {
  @ffi.Int()
  external int encodingAsInt;

  pa_encoding get encoding => pa_encoding.fromValue(encodingAsInt);

  external ffi.Pointer<pa_proplist> plist;
}

enum pa_prop_type_t {
  PA_PROP_TYPE_INT(0),
  PA_PROP_TYPE_INT_RANGE(1),
  PA_PROP_TYPE_INT_ARRAY(2),
  PA_PROP_TYPE_STRING(3),
  PA_PROP_TYPE_STRING_ARRAY(4),
  PA_PROP_TYPE_INVALID(-1);

  final int value;
  const pa_prop_type_t(this.value);

  static pa_prop_type_t fromValue(int value) => switch (value) {
        0 => PA_PROP_TYPE_INT,
        1 => PA_PROP_TYPE_INT_RANGE,
        2 => PA_PROP_TYPE_INT_ARRAY,
        3 => PA_PROP_TYPE_STRING,
        4 => PA_PROP_TYPE_STRING_ARRAY,
        -1 => PA_PROP_TYPE_INVALID,
        _ => throw ArgumentError("Unknown value for pa_prop_type_t: $value"),
      };
}

final class pa_operation extends ffi.Opaque {}

typedef pa_operation_notify_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_operation_notify_cb_tFunction>>;
typedef pa_operation_notify_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_operation> o, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_operation_notify_cb_tFunction = void Function(
    ffi.Pointer<pa_operation> o, ffi.Pointer<ffi.Void> userdata);

final class pa_context extends ffi.Opaque {}

typedef pa_context_notify_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_context_notify_cb_tFunction>>;
typedef pa_context_notify_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_context_notify_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c, ffi.Pointer<ffi.Void> userdata);
typedef pa_context_event_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_context_event_cb_tFunction>>;
typedef pa_context_event_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_context_event_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_proplist> p,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_context_success_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_context_success_cb_tFunction>>;
typedef pa_context_success_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c, ffi.Int success, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_context_success_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c, int success, ffi.Pointer<ffi.Void> userdata);

final class pa_cvolume extends ffi.Struct {
  @ffi.Uint8()
  external int channels;

  @ffi.Array.multi([32])
  external ffi.Array<pa_volume_t> values;
}

typedef pa_volume_t = ffi.Uint32;
typedef Dartpa_volume_t = int;

final class pa_stream extends ffi.Opaque {}

typedef pa_free_cb_t = ffi.Pointer<ffi.NativeFunction<pa_free_cb_tFunction>>;
typedef pa_free_cb_tFunction = ffi.Void Function(ffi.Pointer<ffi.Void> p);
typedef Dartpa_free_cb_tFunction = void Function(ffi.Pointer<ffi.Void> p);
typedef pa_stream_success_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_stream_success_cb_tFunction>>;
typedef pa_stream_success_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_stream> s, ffi.Int success, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_stream_success_cb_tFunction = void Function(
    ffi.Pointer<pa_stream> s, int success, ffi.Pointer<ffi.Void> userdata);
typedef pa_stream_notify_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_stream_notify_cb_tFunction>>;
typedef pa_stream_notify_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_stream> p, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_stream_notify_cb_tFunction = void Function(
    ffi.Pointer<pa_stream> p, ffi.Pointer<ffi.Void> userdata);
typedef pa_stream_request_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_stream_request_cb_tFunction>>;
typedef pa_stream_request_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_stream> p, ffi.Size nbytes, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_stream_request_cb_tFunction = void Function(
    ffi.Pointer<pa_stream> p, int nbytes, ffi.Pointer<ffi.Void> userdata);
typedef pa_stream_event_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_stream_event_cb_tFunction>>;
typedef pa_stream_event_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_proplist> pl,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_stream_event_cb_tFunction = void Function(
    ffi.Pointer<pa_stream> p,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<pa_proplist> pl,
    ffi.Pointer<ffi.Void> userdata);

final class pa_sink_port_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Uint32()
  external int priority;

  @ffi.Int()
  external int available;

  external ffi.Pointer<ffi.Char> availability_group;

  @ffi.Uint32()
  external int type;
}

final class pa_sink_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> description;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @ffi.Uint32()
  external int owner_module;

  external pa_cvolume volume;

  @ffi.Int()
  external int mute;

  @ffi.Uint32()
  external int monitor_source;

  external ffi.Pointer<ffi.Char> monitor_source_name;

  @pa_usec_t()
  external int latency;

  external ffi.Pointer<ffi.Char> driver;

  @ffi.UnsignedInt()
  external int flagsAsInt;

  pa_sink_flags get flags => pa_sink_flags.fromValue(flagsAsInt);

  external ffi.Pointer<pa_proplist> proplist;

  @pa_usec_t()
  external int configured_latency;

  @pa_volume_t()
  external int base_volume;

  @ffi.Int()
  external int stateAsInt;

  pa_sink_state get state => pa_sink_state.fromValue(stateAsInt);

  @ffi.Uint32()
  external int n_volume_steps;

  @ffi.Uint32()
  external int card;

  @ffi.Uint32()
  external int n_ports;

  external ffi.Pointer<ffi.Pointer<pa_sink_port_info>> ports;

  external ffi.Pointer<pa_sink_port_info> active_port;

  @ffi.Uint8()
  external int n_formats;

  external ffi.Pointer<ffi.Pointer<pa_format_info>> formats;
}

typedef pa_sink_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_sink_info_cb_tFunction>>;
typedef pa_sink_info_cb_tFunction = ffi.Void Function(ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sink_info> i, ffi.Int eol, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_sink_info_cb_tFunction = void Function(ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sink_info> i, int eol, ffi.Pointer<ffi.Void> userdata);

final class pa_source_port_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Uint32()
  external int priority;

  @ffi.Int()
  external int available;

  external ffi.Pointer<ffi.Char> availability_group;

  @ffi.Uint32()
  external int type;
}

final class pa_source_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> description;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @ffi.Uint32()
  external int owner_module;

  external pa_cvolume volume;

  @ffi.Int()
  external int mute;

  @ffi.Uint32()
  external int monitor_of_sink;

  external ffi.Pointer<ffi.Char> monitor_of_sink_name;

  @pa_usec_t()
  external int latency;

  external ffi.Pointer<ffi.Char> driver;

  @ffi.UnsignedInt()
  external int flagsAsInt;

  pa_source_flags get flags => pa_source_flags.fromValue(flagsAsInt);

  external ffi.Pointer<pa_proplist> proplist;

  @pa_usec_t()
  external int configured_latency;

  @pa_volume_t()
  external int base_volume;

  @ffi.Int()
  external int stateAsInt;

  pa_source_state get state => pa_source_state.fromValue(stateAsInt);

  @ffi.Uint32()
  external int n_volume_steps;

  @ffi.Uint32()
  external int card;

  @ffi.Uint32()
  external int n_ports;

  external ffi.Pointer<ffi.Pointer<pa_source_port_info>> ports;

  external ffi.Pointer<pa_source_port_info> active_port;

  @ffi.Uint8()
  external int n_formats;

  external ffi.Pointer<ffi.Pointer<pa_format_info>> formats;
}

typedef pa_source_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_source_info_cb_tFunction>>;
typedef pa_source_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_source_info> i,
    ffi.Int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_source_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_source_info> i,
    int eol,
    ffi.Pointer<ffi.Void> userdata);

final class pa_server_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> user_name;

  external ffi.Pointer<ffi.Char> host_name;

  external ffi.Pointer<ffi.Char> server_version;

  external ffi.Pointer<ffi.Char> server_name;

  external pa_sample_spec sample_spec;

  external ffi.Pointer<ffi.Char> default_sink_name;

  external ffi.Pointer<ffi.Char> default_source_name;

  @ffi.Uint32()
  external int cookie;

  external pa_channel_map channel_map;
}

typedef pa_server_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_server_info_cb_tFunction>>;
typedef pa_server_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_server_info> i,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_server_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_server_info> i,
    ffi.Pointer<ffi.Void> userdata);

final class pa_module_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> argument;

  @ffi.Uint32()
  external int n_used;

  @ffi.Int()
  external int auto_unload;

  external ffi.Pointer<pa_proplist> proplist;
}

typedef pa_module_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_module_info_cb_tFunction>>;
typedef pa_module_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_module_info> i,
    ffi.Int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_module_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_module_info> i,
    int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_context_index_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_context_index_cb_tFunction>>;
typedef pa_context_index_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c, ffi.Uint32 idx, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_context_index_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c, int idx, ffi.Pointer<ffi.Void> userdata);
typedef pa_context_string_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_context_string_cb_tFunction>>;
typedef pa_context_string_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Int success,
    ffi.Pointer<ffi.Char> response,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_context_string_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    int success,
    ffi.Pointer<ffi.Char> response,
    ffi.Pointer<ffi.Void> userdata);

final class pa_client_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int owner_module;

  external ffi.Pointer<ffi.Char> driver;

  external ffi.Pointer<pa_proplist> proplist;
}

typedef pa_client_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_client_info_cb_tFunction>>;
typedef pa_client_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_client_info> i,
    ffi.Int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_client_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_client_info> i,
    int eol,
    ffi.Pointer<ffi.Void> userdata);

final class pa_card_profile_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Uint32()
  external int n_sinks;

  @ffi.Uint32()
  external int n_sources;

  @ffi.Uint32()
  external int priority;
}

final class pa_card_profile_info2 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Uint32()
  external int n_sinks;

  @ffi.Uint32()
  external int n_sources;

  @ffi.Uint32()
  external int priority;

  @ffi.Int()
  external int available;
}

final class pa_card_port_info extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Uint32()
  external int priority;

  @ffi.Int()
  external int available;

  @ffi.Int()
  external int direction;

  @ffi.Uint32()
  external int n_profiles;

  external ffi.Pointer<ffi.Pointer<pa_card_profile_info>> profiles;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Int64()
  external int latency_offset;

  external ffi.Pointer<ffi.Pointer<pa_card_profile_info2>> profiles2;

  external ffi.Pointer<ffi.Char> availability_group;

  @ffi.Uint32()
  external int type;
}

final class pa_card_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int owner_module;

  external ffi.Pointer<ffi.Char> driver;

  @ffi.Uint32()
  external int n_profiles;

  external ffi.Pointer<pa_card_profile_info> profiles;

  external ffi.Pointer<pa_card_profile_info> active_profile;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Uint32()
  external int n_ports;

  external ffi.Pointer<ffi.Pointer<pa_card_port_info>> ports;

  external ffi.Pointer<ffi.Pointer<pa_card_profile_info2>> profiles2;

  external ffi.Pointer<pa_card_profile_info2> active_profile2;
}

typedef pa_card_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_card_info_cb_tFunction>>;
typedef pa_card_info_cb_tFunction = ffi.Void Function(ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_card_info> i, ffi.Int eol, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_card_info_cb_tFunction = void Function(ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_card_info> i, int eol, ffi.Pointer<ffi.Void> userdata);

final class pa_sink_input_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int owner_module;

  @ffi.Uint32()
  external int client;

  @ffi.Uint32()
  external int sink;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  external pa_cvolume volume;

  @pa_usec_t()
  external int buffer_usec;

  @pa_usec_t()
  external int sink_usec;

  external ffi.Pointer<ffi.Char> resample_method;

  external ffi.Pointer<ffi.Char> driver;

  @ffi.Int()
  external int mute;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Int()
  external int corked;

  @ffi.Int()
  external int has_volume;

  @ffi.Int()
  external int volume_writable;

  external ffi.Pointer<pa_format_info> format;
}

typedef pa_sink_input_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_sink_input_info_cb_tFunction>>;
typedef pa_sink_input_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sink_input_info> i,
    ffi.Int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_sink_input_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sink_input_info> i,
    int eol,
    ffi.Pointer<ffi.Void> userdata);

final class pa_source_output_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Uint32()
  external int owner_module;

  @ffi.Uint32()
  external int client;

  @ffi.Uint32()
  external int source;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @pa_usec_t()
  external int buffer_usec;

  @pa_usec_t()
  external int source_usec;

  external ffi.Pointer<ffi.Char> resample_method;

  external ffi.Pointer<ffi.Char> driver;

  external ffi.Pointer<pa_proplist> proplist;

  @ffi.Int()
  external int corked;

  external pa_cvolume volume;

  @ffi.Int()
  external int mute;

  @ffi.Int()
  external int has_volume;

  @ffi.Int()
  external int volume_writable;

  external ffi.Pointer<pa_format_info> format;
}

typedef pa_source_output_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_source_output_info_cb_tFunction>>;
typedef pa_source_output_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_source_output_info> i,
    ffi.Int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_source_output_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_source_output_info> i,
    int eol,
    ffi.Pointer<ffi.Void> userdata);

final class pa_stat_info extends ffi.Struct {
  @ffi.Uint32()
  external int memblock_total;

  @ffi.Uint32()
  external int memblock_total_size;

  @ffi.Uint32()
  external int memblock_allocated;

  @ffi.Uint32()
  external int memblock_allocated_size;

  @ffi.Uint32()
  external int scache_size;
}

typedef pa_stat_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_stat_info_cb_tFunction>>;
typedef pa_stat_info_cb_tFunction = ffi.Void Function(ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_stat_info> i, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_stat_info_cb_tFunction = void Function(ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_stat_info> i, ffi.Pointer<ffi.Void> userdata);

final class pa_sample_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> name;

  external pa_cvolume volume;

  external pa_sample_spec sample_spec;

  external pa_channel_map channel_map;

  @pa_usec_t()
  external int duration;

  @ffi.Uint32()
  external int bytes;

  @ffi.Int()
  external int lazy;

  external ffi.Pointer<ffi.Char> filename;

  external ffi.Pointer<pa_proplist> proplist;
}

typedef pa_sample_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_sample_info_cb_tFunction>>;
typedef pa_sample_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sample_info> i,
    ffi.Int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_sample_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_sample_info> i,
    int eol,
    ffi.Pointer<ffi.Void> userdata);

enum pa_autoload_type {
  PA_AUTOLOAD_SINK(0),
  PA_AUTOLOAD_SOURCE(1);

  final int value;
  const pa_autoload_type(this.value);

  static pa_autoload_type fromValue(int value) => switch (value) {
        0 => PA_AUTOLOAD_SINK,
        1 => PA_AUTOLOAD_SOURCE,
        _ => throw ArgumentError("Unknown value for pa_autoload_type: $value"),
      };
}

final class pa_autoload_info extends ffi.Struct {
  @ffi.Uint32()
  external int index;

  external ffi.Pointer<ffi.Char> name;

  @ffi.UnsignedInt()
  external int typeAsInt;

  pa_autoload_type get type => pa_autoload_type.fromValue(typeAsInt);

  external ffi.Pointer<ffi.Char> module;

  external ffi.Pointer<ffi.Char> argument;
}

typedef pa_autoload_info_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_autoload_info_cb_tFunction>>;
typedef pa_autoload_info_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_autoload_info> i,
    ffi.Int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_autoload_info_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    ffi.Pointer<pa_autoload_info> i,
    int eol,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_context_subscribe_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_context_subscribe_cb_tFunction>>;
typedef pa_context_subscribe_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c,
    ffi.UnsignedInt t,
    ffi.Uint32 idx,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_context_subscribe_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c,
    pa_subscription_event_type t,
    int idx,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_context_play_sample_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_context_play_sample_cb_tFunction>>;
typedef pa_context_play_sample_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_context> c, ffi.Uint32 idx, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_context_play_sample_cb_tFunction = void Function(
    ffi.Pointer<pa_context> c, int idx, ffi.Pointer<ffi.Void> userdata);

final class pa_threaded_mainloop extends ffi.Opaque {}

final class pollfd extends ffi.Opaque {}

final class pa_mainloop extends ffi.Opaque {}

typedef pa_poll_func = ffi.Pointer<ffi.NativeFunction<pa_poll_funcFunction>>;
typedef pa_poll_funcFunction = ffi.Int Function(ffi.Pointer<pollfd> ufds,
    ffi.UnsignedLong nfds, ffi.Int timeout, ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_poll_funcFunction = int Function(ffi.Pointer<pollfd> ufds,
    int nfds, int timeout, ffi.Pointer<ffi.Void> userdata);

final class pa_signal_event extends ffi.Opaque {}

typedef pa_signal_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_signal_cb_tFunction>>;
typedef pa_signal_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> api,
    ffi.Pointer<pa_signal_event> e,
    ffi.Int sig,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_signal_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> api,
    ffi.Pointer<pa_signal_event> e,
    int sig,
    ffi.Pointer<ffi.Void> userdata);
typedef pa_signal_destroy_cb_t
    = ffi.Pointer<ffi.NativeFunction<pa_signal_destroy_cb_tFunction>>;
typedef pa_signal_destroy_cb_tFunction = ffi.Void Function(
    ffi.Pointer<pa_mainloop_api> api,
    ffi.Pointer<pa_signal_event> e,
    ffi.Pointer<ffi.Void> userdata);
typedef Dartpa_signal_destroy_cb_tFunction = void Function(
    ffi.Pointer<pa_mainloop_api> api,
    ffi.Pointer<pa_signal_event> e,
    ffi.Pointer<ffi.Void> userdata);

const int SI_ASYNCNL = -60;

const int SI_DETHREAD = -7;

const int SI_TKILL = -6;

const int SI_SIGIO = -5;

const int SI_ASYNCIO = -4;

const int SI_MESGQ = -3;

const int SI_TIMER = -2;

const int SI_QUEUE = -1;

const int SI_USER = 0;

const int SI_KERNEL = 128;

const int ILL_ILLOPC = 1;

const int ILL_ILLOPN = 2;

const int ILL_ILLADR = 3;

const int ILL_ILLTRP = 4;

const int ILL_PRVOPC = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int ILL_BADIADDR = 9;

const int FPE_INTDIV = 1;

const int FPE_INTOVF = 2;

const int FPE_FLTDIV = 3;

const int FPE_FLTOVF = 4;

const int FPE_FLTUND = 5;

const int FPE_FLTRES = 6;

const int FPE_FLTINV = 7;

const int FPE_FLTSUB = 8;

const int FPE_FLTUNK = 14;

const int FPE_CONDTRAP = 15;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int SEGV_BNDERR = 3;

const int SEGV_PKUERR = 4;

const int SEGV_ACCADI = 5;

const int SEGV_ADIDERR = 6;

const int SEGV_ADIPERR = 7;

const int SEGV_MTEAERR = 8;

const int SEGV_MTESERR = 9;

const int SEGV_CPERR = 10;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int BUS_MCEERR_AR = 4;

const int BUS_MCEERR_AO = 5;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SIGEV_SIGNAL = 0;

const int SIGEV_NONE = 1;

const int SIGEV_THREAD = 2;

const int SIGEV_THREAD_ID = 4;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 2;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int _SYS_TIME_H = 1;

const int __time_t_defined = 1;

const int __timeval_defined = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int _STRUCT_TIMESPEC = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _SYS_PARAM_H = 1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int _BITS_SIGNUM_GENERIC_H = 1;

const int SIGINT = 2;

const int SIGILL = 4;

const int SIGABRT = 6;

const int SIGFPE = 8;

const int SIGSEGV = 11;

const int SIGTERM = 15;

const int SIGHUP = 1;

const int SIGQUIT = 3;

const int SIGTRAP = 5;

const int SIGKILL = 9;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGIO = 29;

const int SIGIOT = 6;

const int SIGCLD = 17;

const int _BITS_SIGNUM_ARCH_H = 1;

const int SIGSTKFLT = 16;

const int SIGPWR = 30;

const int SIGBUS = 7;

const int SIGSYS = 31;

const int SIGURG = 23;

const int SIGSTOP = 19;

const int SIGTSTP = 20;

const int SIGCONT = 18;

const int SIGCHLD = 17;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGPOLL = 29;

const int SIGXFSZ = 25;

const int SIGXCPU = 24;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGUSR1 = 10;

const int SIGUSR2 = 12;

const int SIGWINCH = 28;

const int __SIGRTMIN = 32;

const int __SIGRTMAX = 64;

const int _NSIG = 65;

const int __sig_atomic_t_defined = 1;

const int __siginfo_t_defined = 1;

const int __SI_MAX_SIZE = 128;

const int __SI_PAD_SIZE = 28;

const int _BITS_SIGINFO_ARCH_H = 1;

const int __SI_ERRNO_THEN_CODE = 1;

const int __SI_HAVE_SIGSYS = 1;

const int _BITS_SIGINFO_CONSTS_H = 1;

const int __SI_ASYNCIO_AFTER_SIGIO = 1;

const int SI_ASYNCNL1 = -60;

const int SI_DETHREAD1 = -7;

const int SI_TKILL1 = -6;

const int SI_SIGIO1 = -5;

const int SI_ASYNCIO1 = -4;

const int SI_MESGQ1 = -3;

const int SI_TIMER1 = -2;

const int SI_QUEUE1 = -1;

const int SI_USER1 = 0;

const int SI_KERNEL1 = 128;

const int ILL_ILLOPC1 = 1;

const int ILL_ILLOPN1 = 2;

const int ILL_ILLADR1 = 3;

const int ILL_ILLTRP1 = 4;

const int ILL_PRVOPC1 = 5;

const int ILL_PRVREG1 = 6;

const int ILL_COPROC1 = 7;

const int ILL_BADSTK1 = 8;

const int ILL_BADIADDR1 = 9;

const int FPE_INTDIV1 = 1;

const int FPE_INTOVF1 = 2;

const int FPE_FLTDIV1 = 3;

const int FPE_FLTOVF1 = 4;

const int FPE_FLTUND1 = 5;

const int FPE_FLTRES1 = 6;

const int FPE_FLTINV1 = 7;

const int FPE_FLTSUB1 = 8;

const int FPE_FLTUNK1 = 14;

const int FPE_CONDTRAP1 = 15;

const int SEGV_MAPERR1 = 1;

const int SEGV_ACCERR1 = 2;

const int SEGV_BNDERR1 = 3;

const int SEGV_PKUERR1 = 4;

const int SEGV_ACCADI1 = 5;

const int SEGV_ADIDERR1 = 6;

const int SEGV_ADIPERR1 = 7;

const int SEGV_MTEAERR1 = 8;

const int SEGV_MTESERR1 = 9;

const int SEGV_CPERR1 = 10;

const int BUS_ADRALN1 = 1;

const int BUS_ADRERR1 = 2;

const int BUS_OBJERR1 = 3;

const int BUS_MCEERR_AR1 = 4;

const int BUS_MCEERR_AO1 = 5;

const int CLD_EXITED1 = 1;

const int CLD_KILLED1 = 2;

const int CLD_DUMPED1 = 3;

const int CLD_TRAPPED1 = 4;

const int CLD_STOPPED1 = 5;

const int CLD_CONTINUED1 = 6;

const int POLL_IN1 = 1;

const int POLL_OUT1 = 2;

const int POLL_MSG1 = 3;

const int POLL_ERR1 = 4;

const int POLL_PRI1 = 5;

const int POLL_HUP1 = 6;

const int __sigevent_t_defined = 1;

const int __SIGEV_MAX_SIZE = 64;

const int __SIGEV_PAD_SIZE = 12;

const int _BITS_SIGEVENT_CONSTS_H = 1;

const int SIGEV_SIGNAL1 = 0;

const int SIGEV_NONE1 = 1;

const int SIGEV_THREAD1 = 2;

const int SIGEV_THREAD_ID1 = 4;

const int _BITS_SIGACTION_H = 1;

const int SA_NOCLDSTOP = 1;

const int SA_NOCLDWAIT = 2;

const int SA_SIGINFO = 4;

const int SA_ONSTACK = 134217728;

const int SA_RESTART = 268435456;

const int SA_NODEFER = 1073741824;

const int SA_RESETHAND = 2147483648;

const int SA_INTERRUPT = 536870912;

const int SA_NOMASK = 1073741824;

const int SA_ONESHOT = 2147483648;

const int SA_STACK = 134217728;

const int SIG_BLOCK = 0;

const int SIG_UNBLOCK = 1;

const int SIG_SETMASK = 2;

const int _BITS_SIGCONTEXT_H = 1;

const int FP_XSTATE_MAGIC1 = 1179670611;

const int FP_XSTATE_MAGIC2 = 1179670597;

const int FP_XSTATE_MAGIC2_SIZE = 4;

const int __stack_t_defined = 1;

const int _SYS_UCONTEXT_H = 1;

const int __NGREG = 23;

const int NGREG = 23;

const int _BITS_SIGSTACK_H = 1;

const int _BITS_SS_FLAGS_H = 1;

const int SS_ONSTACK1 = 1;

const int SS_DISABLE1 = 2;

const int __sigstack_defined = 1;

const int _BITS_SIGTHREAD_H = 1;

const int HZ = 100;

const int EXEC_PAGESIZE = 4096;

const int NOGROUP = -1;

const int MAXHOSTNAMELEN = 64;

const int MAXSYMLINKS = 20;

const int NOFILE = 256;

const int NCARGS = 131072;

const int NBBY = 8;

const int NGROUPS = 65536;

const int CANBSIZ = 255;

const int MAXPATHLEN = 4096;

const int NODEV = -1;

const int DEV_BSIZE = 512;

const int PA_API_VERSION = 12;

const int PA_PROTOCOL_VERSION = 35;

const int PA_MAJOR = 17;

const int PA_MINOR = 0;

const int PA_MICRO = 0;

const int PA_CHANNELS_MAX = 32;

const int PA_RATE_MAX = 768000;

const int PA_SAMPLE_S16NE = 3;

const int PA_SAMPLE_FLOAT32NE = 5;

const int PA_SAMPLE_S32NE = 7;

const int PA_SAMPLE_S24NE = 9;

const int PA_SAMPLE_S24_32NE = 11;

const int PA_SAMPLE_S16RE = 4;

const int PA_SAMPLE_FLOAT32RE = 6;

const int PA_SAMPLE_S32RE = 8;

const int PA_SAMPLE_S24RE = 10;

const int PA_SAMPLE_S24_32RE = 12;

const int PA_SAMPLE_FLOAT32 = 5;

const int PA_SAMPLE_U8 = 0;

const int PA_SAMPLE_ALAW = 1;

const int PA_SAMPLE_ULAW = 2;

const int PA_SAMPLE_S16LE = 3;

const int PA_SAMPLE_S16BE = 4;

const int PA_SAMPLE_FLOAT32LE = 5;

const int PA_SAMPLE_FLOAT32BE = 6;

const int PA_SAMPLE_S32LE = 7;

const int PA_SAMPLE_S32BE = 8;

const int PA_SAMPLE_S24LE = 9;

const int PA_SAMPLE_S24BE = 10;

const int PA_SAMPLE_S24_32LE = 11;

const int PA_SAMPLE_S24_32BE = 12;

const int PA_SAMPLE_SPEC_SNPRINT_MAX = 32;

const int PA_BYTES_SNPRINT_MAX = 11;

const int PA_CONTEXT_UNCONNECTED = 0;

const int PA_CONTEXT_CONNECTING = 1;

const int PA_CONTEXT_AUTHORIZING = 2;

const int PA_CONTEXT_SETTING_NAME = 3;

const int PA_CONTEXT_READY = 4;

const int PA_CONTEXT_FAILED = 5;

const int PA_CONTEXT_TERMINATED = 6;

const int PA_STREAM_UNCONNECTED = 0;

const int PA_STREAM_CREATING = 1;

const int PA_STREAM_READY = 2;

const int PA_STREAM_FAILED = 3;

const int PA_STREAM_TERMINATED = 4;

const int PA_OPERATION_RUNNING = 0;

const int PA_OPERATION_DONE = 1;

const int PA_OPERATION_CANCELED = 2;

const int PA_OPERATION_CANCELLED = 2;

const int PA_INVALID_INDEX = 4294967295;

const int PA_CONTEXT_NOAUTOSPAWN = 1;

const int PA_CONTEXT_NOFAIL = 2;

const int PA_DIRECTION_OUTPUT = 1;

const int PA_DIRECTION_INPUT = 2;

const int PA_DEVICE_TYPE_SINK = 0;

const int PA_DEVICE_TYPE_SOURCE = 1;

const int PA_STREAM_NODIRECTION = 0;

const int PA_STREAM_PLAYBACK = 1;

const int PA_STREAM_RECORD = 2;

const int PA_STREAM_UPLOAD = 3;

const int PA_STREAM_NOT_MONOTONOUS = 4;

const int PA_STREAM_START_CORKED = 1;

const int PA_STREAM_INTERPOLATE_TIMING = 2;

const int PA_STREAM_NOT_MONOTONIC = 4;

const int PA_STREAM_AUTO_TIMING_UPDATE = 8;

const int PA_STREAM_NO_REMAP_CHANNELS = 16;

const int PA_STREAM_NO_REMIX_CHANNELS = 32;

const int PA_STREAM_FIX_FORMAT = 64;

const int PA_STREAM_FIX_RATE = 128;

const int PA_STREAM_FIX_CHANNELS = 256;

const int PA_STREAM_DONT_MOVE = 512;

const int PA_STREAM_VARIABLE_RATE = 1024;

const int PA_STREAM_PEAK_DETECT = 2048;

const int PA_STREAM_START_MUTED = 4096;

const int PA_STREAM_ADJUST_LATENCY = 8192;

const int PA_STREAM_EARLY_REQUESTS = 16384;

const int PA_STREAM_DONT_INHIBIT_AUTO_SUSPEND = 32768;

const int PA_STREAM_START_UNMUTED = 65536;

const int PA_STREAM_FAIL_ON_SUSPEND = 131072;

const int PA_STREAM_RELATIVE_VOLUME = 262144;

const int PA_STREAM_PASSTHROUGH = 524288;

const int PA_OK = 0;

const int PA_ERR_ACCESS = 1;

const int PA_ERR_COMMAND = 2;

const int PA_ERR_INVALID = 3;

const int PA_ERR_EXIST = 4;

const int PA_ERR_NOENTITY = 5;

const int PA_ERR_CONNECTIONREFUSED = 6;

const int PA_ERR_PROTOCOL = 7;

const int PA_ERR_TIMEOUT = 8;

const int PA_ERR_AUTHKEY = 9;

const int PA_ERR_INTERNAL = 10;

const int PA_ERR_CONNECTIONTERMINATED = 11;

const int PA_ERR_KILLED = 12;

const int PA_ERR_INVALIDSERVER = 13;

const int PA_ERR_MODINITFAILED = 14;

const int PA_ERR_BADSTATE = 15;

const int PA_ERR_NODATA = 16;

const int PA_ERR_VERSION = 17;

const int PA_ERR_TOOLARGE = 18;

const int PA_ERR_NOTSUPPORTED = 19;

const int PA_ERR_UNKNOWN = 20;

const int PA_ERR_NOEXTENSION = 21;

const int PA_ERR_OBSOLETE = 22;

const int PA_ERR_NOTIMPLEMENTED = 23;

const int PA_ERR_FORKED = 24;

const int PA_ERR_MAX = 27;

const int PA_SUBSCRIPTION_MASK_NULL = 0;

const int PA_SUBSCRIPTION_MASK_SINK = 1;

const int PA_SUBSCRIPTION_MASK_SOURCE = 2;

const int PA_SUBSCRIPTION_MASK_SINK_INPUT = 4;

const int PA_SUBSCRIPTION_MASK_SOURCE_OUTPUT = 8;

const int PA_SUBSCRIPTION_MASK_MODULE = 16;

const int PA_SUBSCRIPTION_MASK_CLIENT = 32;

const int PA_SUBSCRIPTION_MASK_SAMPLE_CACHE = 64;

const int PA_SUBSCRIPTION_MASK_SERVER = 128;

const int PA_SUBSCRIPTION_MASK_AUTOLOAD = 256;

const int PA_SUBSCRIPTION_MASK_CARD = 512;

const int PA_SUBSCRIPTION_MASK_ALL = 767;

const int PA_SUBSCRIPTION_EVENT_SINK = 0;

const int PA_SUBSCRIPTION_EVENT_SOURCE = 1;

const int PA_SUBSCRIPTION_EVENT_SINK_INPUT = 2;

const int PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT = 3;

const int PA_SUBSCRIPTION_EVENT_MODULE = 4;

const int PA_SUBSCRIPTION_EVENT_CLIENT = 5;

const int PA_SUBSCRIPTION_EVENT_SAMPLE_CACHE = 6;

const int PA_SUBSCRIPTION_EVENT_SERVER = 7;

const int PA_SUBSCRIPTION_EVENT_AUTOLOAD = 8;

const int PA_SUBSCRIPTION_EVENT_CARD = 9;

const int PA_SUBSCRIPTION_EVENT_FACILITY_MASK = 15;

const int PA_SUBSCRIPTION_EVENT_NEW = 0;

const int PA_SUBSCRIPTION_EVENT_CHANGE = 16;

const int PA_SUBSCRIPTION_EVENT_REMOVE = 32;

const int PA_SUBSCRIPTION_EVENT_TYPE_MASK = 48;

const int PA_SEEK_RELATIVE = 0;

const int PA_SEEK_ABSOLUTE = 1;

const int PA_SEEK_RELATIVE_ON_READ = 2;

const int PA_SEEK_RELATIVE_END = 3;

const int PA_SINK_HW_VOLUME_CTRL = 1;

const int PA_SINK_LATENCY = 2;

const int PA_SINK_HARDWARE = 4;

const int PA_SINK_NETWORK = 8;

const int PA_SINK_HW_MUTE_CTRL = 16;

const int PA_SINK_DECIBEL_VOLUME = 32;

const int PA_SINK_FLAT_VOLUME = 64;

const int PA_SINK_DYNAMIC_LATENCY = 128;

const int PA_SINK_SET_FORMATS = 256;

const int PA_SINK_INVALID_STATE = -1;

const int PA_SINK_RUNNING = 0;

const int PA_SINK_IDLE = 1;

const int PA_SINK_SUSPENDED = 2;

const int PA_SINK_INIT = -2;

const int PA_SINK_UNLINKED = -3;

const int PA_SOURCE_HW_VOLUME_CTRL = 1;

const int PA_SOURCE_LATENCY = 2;

const int PA_SOURCE_HARDWARE = 4;

const int PA_SOURCE_NETWORK = 8;

const int PA_SOURCE_HW_MUTE_CTRL = 16;

const int PA_SOURCE_DECIBEL_VOLUME = 32;

const int PA_SOURCE_DYNAMIC_LATENCY = 64;

const int PA_SOURCE_FLAT_VOLUME = 128;

const int PA_SOURCE_INVALID_STATE = -1;

const int PA_SOURCE_RUNNING = 0;

const int PA_SOURCE_IDLE = 1;

const int PA_SOURCE_SUSPENDED = 2;

const int PA_SOURCE_INIT = -2;

const int PA_SOURCE_UNLINKED = -3;

const String PA_STREAM_EVENT_REQUEST_CORK = 'request-cork';

const String PA_STREAM_EVENT_REQUEST_UNCORK = 'request-uncork';

const String PA_STREAM_EVENT_FORMAT_LOST = 'format-lost';

const int PA_PORT_AVAILABLE_UNKNOWN = 0;

const int PA_PORT_AVAILABLE_NO = 1;

const int PA_PORT_AVAILABLE_YES = 2;

const String PA_PROP_MEDIA_NAME = 'media.name';

const String PA_PROP_MEDIA_TITLE = 'media.title';

const String PA_PROP_MEDIA_ARTIST = 'media.artist';

const String PA_PROP_MEDIA_COPYRIGHT = 'media.copyright';

const String PA_PROP_MEDIA_SOFTWARE = 'media.software';

const String PA_PROP_MEDIA_LANGUAGE = 'media.language';

const String PA_PROP_MEDIA_FILENAME = 'media.filename';

const String PA_PROP_MEDIA_ICON = 'media.icon';

const String PA_PROP_MEDIA_ICON_NAME = 'media.icon_name';

const String PA_PROP_MEDIA_ROLE = 'media.role';

const String PA_PROP_FILTER_WANT = 'filter.want';

const String PA_PROP_FILTER_APPLY = 'filter.apply';

const String PA_PROP_FILTER_SUPPRESS = 'filter.suppress';

const String PA_PROP_EVENT_ID = 'event.id';

const String PA_PROP_EVENT_DESCRIPTION = 'event.description';

const String PA_PROP_EVENT_MOUSE_X = 'event.mouse.x';

const String PA_PROP_EVENT_MOUSE_Y = 'event.mouse.y';

const String PA_PROP_EVENT_MOUSE_HPOS = 'event.mouse.hpos';

const String PA_PROP_EVENT_MOUSE_VPOS = 'event.mouse.vpos';

const String PA_PROP_EVENT_MOUSE_BUTTON = 'event.mouse.button';

const String PA_PROP_WINDOW_NAME = 'window.name';

const String PA_PROP_WINDOW_ID = 'window.id';

const String PA_PROP_WINDOW_ICON = 'window.icon';

const String PA_PROP_WINDOW_ICON_NAME = 'window.icon_name';

const String PA_PROP_WINDOW_X = 'window.x';

const String PA_PROP_WINDOW_Y = 'window.y';

const String PA_PROP_WINDOW_WIDTH = 'window.width';

const String PA_PROP_WINDOW_HEIGHT = 'window.height';

const String PA_PROP_WINDOW_HPOS = 'window.hpos';

const String PA_PROP_WINDOW_VPOS = 'window.vpos';

const String PA_PROP_WINDOW_DESKTOP = 'window.desktop';

const String PA_PROP_WINDOW_X11_DISPLAY = 'window.x11.display';

const String PA_PROP_WINDOW_X11_SCREEN = 'window.x11.screen';

const String PA_PROP_WINDOW_X11_MONITOR = 'window.x11.monitor';

const String PA_PROP_WINDOW_X11_XID = 'window.x11.xid';

const String PA_PROP_APPLICATION_NAME = 'application.name';

const String PA_PROP_APPLICATION_ID = 'application.id';

const String PA_PROP_APPLICATION_VERSION = 'application.version';

const String PA_PROP_APPLICATION_ICON = 'application.icon';

const String PA_PROP_APPLICATION_ICON_NAME = 'application.icon_name';

const String PA_PROP_APPLICATION_LANGUAGE = 'application.language';

const String PA_PROP_APPLICATION_PROCESS_ID = 'application.process.id';

const String PA_PROP_APPLICATION_PROCESS_BINARY = 'application.process.binary';

const String PA_PROP_APPLICATION_PROCESS_USER = 'application.process.user';

const String PA_PROP_APPLICATION_PROCESS_HOST = 'application.process.host';

const String PA_PROP_APPLICATION_PROCESS_MACHINE_ID =
    'application.process.machine_id';

const String PA_PROP_APPLICATION_PROCESS_SESSION_ID =
    'application.process.session_id';

const String PA_PROP_DEVICE_STRING = 'device.string';

const String PA_PROP_DEVICE_API = 'device.api';

const String PA_PROP_DEVICE_DESCRIPTION = 'device.description';

const String PA_PROP_DEVICE_BUS_PATH = 'device.bus_path';

const String PA_PROP_DEVICE_SERIAL = 'device.serial';

const String PA_PROP_DEVICE_VENDOR_ID = 'device.vendor.id';

const String PA_PROP_DEVICE_VENDOR_NAME = 'device.vendor.name';

const String PA_PROP_DEVICE_PRODUCT_ID = 'device.product.id';

const String PA_PROP_DEVICE_PRODUCT_NAME = 'device.product.name';

const String PA_PROP_DEVICE_CLASS = 'device.class';

const String PA_PROP_DEVICE_FORM_FACTOR = 'device.form_factor';

const String PA_PROP_DEVICE_BUS = 'device.bus';

const String PA_PROP_DEVICE_ICON = 'device.icon';

const String PA_PROP_DEVICE_ICON_NAME = 'device.icon_name';

const String PA_PROP_DEVICE_ACCESS_MODE = 'device.access_mode';

const String PA_PROP_DEVICE_MASTER_DEVICE = 'device.master_device';

const String PA_PROP_DEVICE_BUFFERING_BUFFER_SIZE =
    'device.buffering.buffer_size';

const String PA_PROP_DEVICE_BUFFERING_FRAGMENT_SIZE =
    'device.buffering.fragment_size';

const String PA_PROP_DEVICE_PROFILE_NAME = 'device.profile.name';

const String PA_PROP_DEVICE_INTENDED_ROLES = 'device.intended_roles';

const String PA_PROP_DEVICE_PROFILE_DESCRIPTION = 'device.profile.description';

const String PA_PROP_MODULE_AUTHOR = 'module.author';

const String PA_PROP_MODULE_DESCRIPTION = 'module.description';

const String PA_PROP_MODULE_USAGE = 'module.usage';

const String PA_PROP_MODULE_VERSION = 'module.version';

const String PA_PROP_FORMAT_SAMPLE_FORMAT = 'format.sample_format';

const String PA_PROP_FORMAT_RATE = 'format.rate';

const String PA_PROP_FORMAT_CHANNELS = 'format.channels';

const String PA_PROP_FORMAT_CHANNEL_MAP = 'format.channel_map';

const String PA_PROP_CONTEXT_FORCE_DISABLE_SHM = 'context.force.disable.shm';

const String PA_PROP_BLUETOOTH_CODEC = 'bluetooth.codec';

const int PA_UPDATE_SET = 0;

const int PA_UPDATE_MERGE = 1;

const int PA_UPDATE_REPLACE = 2;

const int PA_CHANNEL_POSITION_INVALID = -1;

const int PA_CHANNEL_POSITION_MONO = 0;

const int PA_CHANNEL_POSITION_LEFT = 1;

const int PA_CHANNEL_POSITION_RIGHT = 2;

const int PA_CHANNEL_POSITION_CENTER = 3;

const int PA_CHANNEL_POSITION_FRONT_LEFT = 1;

const int PA_CHANNEL_POSITION_FRONT_RIGHT = 2;

const int PA_CHANNEL_POSITION_FRONT_CENTER = 3;

const int PA_CHANNEL_POSITION_REAR_CENTER = 4;

const int PA_CHANNEL_POSITION_REAR_LEFT = 5;

const int PA_CHANNEL_POSITION_REAR_RIGHT = 6;

const int PA_CHANNEL_POSITION_LFE = 7;

const int PA_CHANNEL_POSITION_SUBWOOFER = 7;

const int PA_CHANNEL_POSITION_FRONT_LEFT_OF_CENTER = 8;

const int PA_CHANNEL_POSITION_FRONT_RIGHT_OF_CENTER = 9;

const int PA_CHANNEL_POSITION_SIDE_LEFT = 10;

const int PA_CHANNEL_POSITION_SIDE_RIGHT = 11;

const int PA_CHANNEL_POSITION_AUX0 = 12;

const int PA_CHANNEL_POSITION_AUX1 = 13;

const int PA_CHANNEL_POSITION_AUX2 = 14;

const int PA_CHANNEL_POSITION_AUX3 = 15;

const int PA_CHANNEL_POSITION_AUX4 = 16;

const int PA_CHANNEL_POSITION_AUX5 = 17;

const int PA_CHANNEL_POSITION_AUX6 = 18;

const int PA_CHANNEL_POSITION_AUX7 = 19;

const int PA_CHANNEL_POSITION_AUX8 = 20;

const int PA_CHANNEL_POSITION_AUX9 = 21;

const int PA_CHANNEL_POSITION_AUX10 = 22;

const int PA_CHANNEL_POSITION_AUX11 = 23;

const int PA_CHANNEL_POSITION_AUX12 = 24;

const int PA_CHANNEL_POSITION_AUX13 = 25;

const int PA_CHANNEL_POSITION_AUX14 = 26;

const int PA_CHANNEL_POSITION_AUX15 = 27;

const int PA_CHANNEL_POSITION_AUX16 = 28;

const int PA_CHANNEL_POSITION_AUX17 = 29;

const int PA_CHANNEL_POSITION_AUX18 = 30;

const int PA_CHANNEL_POSITION_AUX19 = 31;

const int PA_CHANNEL_POSITION_AUX20 = 32;

const int PA_CHANNEL_POSITION_AUX21 = 33;

const int PA_CHANNEL_POSITION_AUX22 = 34;

const int PA_CHANNEL_POSITION_AUX23 = 35;

const int PA_CHANNEL_POSITION_AUX24 = 36;

const int PA_CHANNEL_POSITION_AUX25 = 37;

const int PA_CHANNEL_POSITION_AUX26 = 38;

const int PA_CHANNEL_POSITION_AUX27 = 39;

const int PA_CHANNEL_POSITION_AUX28 = 40;

const int PA_CHANNEL_POSITION_AUX29 = 41;

const int PA_CHANNEL_POSITION_AUX30 = 42;

const int PA_CHANNEL_POSITION_AUX31 = 43;

const int PA_CHANNEL_POSITION_TOP_CENTER = 44;

const int PA_CHANNEL_POSITION_TOP_FRONT_LEFT = 45;

const int PA_CHANNEL_POSITION_TOP_FRONT_RIGHT = 46;

const int PA_CHANNEL_POSITION_TOP_FRONT_CENTER = 47;

const int PA_CHANNEL_POSITION_TOP_REAR_LEFT = 48;

const int PA_CHANNEL_POSITION_TOP_REAR_RIGHT = 49;

const int PA_CHANNEL_POSITION_TOP_REAR_CENTER = 50;

const int PA_CHANNEL_POSITION_MAX = 51;

const int PA_CHANNEL_MAP_AIFF = 0;

const int PA_CHANNEL_MAP_ALSA = 1;

const int PA_CHANNEL_MAP_AUX = 2;

const int PA_CHANNEL_MAP_WAVEEX = 3;

const int PA_CHANNEL_MAP_OSS = 4;

const int PA_CHANNEL_MAP_DEF_MAX = 5;

const int PA_CHANNEL_MAP_DEFAULT = 0;

const int PA_CHANNEL_MAP_SNPRINT_MAX = 336;

const int PA_ENCODING_ANY = 0;

const int PA_ENCODING_PCM = 1;

const int PA_ENCODING_AC3_IEC61937 = 2;

const int PA_ENCODING_EAC3_IEC61937 = 3;

const int PA_ENCODING_MPEG_IEC61937 = 4;

const int PA_ENCODING_DTS_IEC61937 = 5;

const int PA_ENCODING_MPEG2_AAC_IEC61937 = 6;

const int PA_ENCODING_TRUEHD_IEC61937 = 7;

const int PA_ENCODING_DTSHD_IEC61937 = 8;

const int PA_ENCODING_MAX = 9;

const int PA_ENCODING_INVALID = -1;

const int PA_FORMAT_INFO_SNPRINT_MAX = 256;

const int PA_PROP_TYPE_INT = 0;

const int PA_PROP_TYPE_INT_RANGE = 1;

const int PA_PROP_TYPE_INT_ARRAY = 2;

const int PA_PROP_TYPE_STRING = 3;

const int PA_PROP_TYPE_STRING_ARRAY = 4;

const int PA_PROP_TYPE_INVALID = -1;

const int PA_VOLUME_NORM = 65536;

const int PA_VOLUME_MUTED = 0;

const int PA_VOLUME_MAX = 2147483647;

const int PA_VOLUME_INVALID = 4294967295;

const int PA_CVOLUME_SNPRINT_MAX = 320;

const int PA_SW_CVOLUME_SNPRINT_DB_MAX = 448;

const int PA_CVOLUME_SNPRINT_VERBOSE_MAX = 1984;

const int PA_VOLUME_SNPRINT_MAX = 10;

const int PA_SW_VOLUME_SNPRINT_DB_MAX = 11;

const int PA_VOLUME_SNPRINT_VERBOSE_MAX = 35;

const double PA_DECIBEL_MININFTY = -200.0;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int PA_MSEC_PER_SEC = 1000;

const int PA_USEC_PER_SEC = 1000000;

const int PA_NSEC_PER_SEC = 1000000000;

const int PA_USEC_PER_MSEC = 1000;

const int PA_NSEC_PER_MSEC = 1000000;

const int PA_NSEC_PER_USEC = 1000;

const int PA_USEC_INVALID = -1;

const int PA_USEC_MAX = -2;
